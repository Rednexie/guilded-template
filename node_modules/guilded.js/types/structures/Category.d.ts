import type { CategoryPayload } from "@guildedjs/api";
import type { GlobalCategoryManager } from "../managers/global/CategoryManager";
import { Base } from "./Base";
import type { Client } from "./Client";
export declare class Category extends Base<CategoryPayload, number> {
    /** The ID of the server this category is in. */
    serverId: string;
    /** The name of this category. */
    name: string;
    /** The timestamp of when this category was created. */
    _createdAt: number;
    /** The ID of the group this category is in. */
    groupId: string;
    /** The timestamp of when this category was last updated. */
    _updatedAt: number | null;
    constructor(client: Client, data: CategoryPayload);
    _update(data: CategoryPayload): this;
    /**
     * Gets the creation date of this category.
     *
     * @returns The creation date of this category.
     */
    get createdAt(): Date;
    /**
     * Gets the last time this category was updated.
     *
     * @returns The last time this category was updated.
     */
    get updatedAt(): Date | null;
    /**
     * Updates this webhook with new options
     *
     * @param options The new options for this webhook
     * @returns A promise that resolves with the updated webhook
     */
    update(options: Parameters<GlobalCategoryManager["update"]>[2]): Promise<Category | null>;
    /**
     * Delete this category.
     *
     * @returns A Promise that resolves with the updated category.
     */
    delete(): Promise<void>;
}
//# sourceMappingURL=Category.d.ts.map