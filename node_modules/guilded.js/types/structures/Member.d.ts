import { Collection } from "@discordjs/collection";
import type { ServerMemberPayload, SocialLinkPayload, UserSummaryPayload } from "@guildedjs/api";
import type { UpgradedServerMemberBanPayload, UpgradedServerMemberPayload, UpgradedServerMemberSummaryPayload } from "../typings";
import { Base } from "./Base";
import type { Client } from "./Client";
import type { User } from "./User";
export declare class Member extends Base<UpgradedServerMemberPayload> {
    /** The ID of the server this role belongs to */
    readonly serverId: string;
    /** The nickname for this member */
    nickname: string | null;
    /** Date this member joined */
    _joinedAt: number | null;
    /** Roles this member has by ID (TODO: role object when Guilded API has one) */
    roleIds: number[];
    /** Whether this member has been kicked */
    kicked: boolean;
    /** Whether this member has been banned */
    banned: boolean;
    /** Whether this member owns the server */
    isOwner: boolean;
    /** Cached social links of this member */
    socialLinks: Collection<SocialLinkPayload["type"], SocialLinkPayload>;
    constructor(client: Client, data: UpgradedServerMemberPayload);
    get joinedAt(): Date | null;
    _update(data: Partial<ServerMemberPayload & {
        kicked: boolean;
        banned: boolean;
    }>): this;
    /**
     * Get the user associated with this member.
     *
     * @returns The user associated with this member or null if the user is not cached.
     */
    get user(): User | null;
    /**
     * The username of this member.
     *
     * @returns The username of this member or null if the user is not cached.
     */
    get username(): string | null;
    /**
     * Either the nickname or the username associated with this member.
     *
     * @returns The nickname of this member or their username if they have no nickname, or null if the user does not exist.
     */
    get displayName(): string | null;
    /**
     * Get a list of the roles assigned to this member.
     *
     * @returns A Promise that resolves with an array of role IDs assigned to this member.
     */
    getRoles(): Promise<number[]>;
    /**
     * Update this member's nickname.
     *
     * @param nickname - The new nickname for the member.
     * @returns A Promise that resolves with the new nickname for the member.
     */
    updateNickname(nickname: string): Promise<string>;
    /**
     * Reset this member's nickname.
     *
     * @returns A Promise that resolves once the member's nickname has been reset.
     */
    resetNickname(): Promise<void>;
    /**
     * Award XP to this member.
     *
     * @param amount - The amount of XP to award to the member.
     * @returns A Promise that resolves with the new total amount of XP the member has.
     */
    awardXP(amount: number): Promise<number>;
    /**
     * Add role to this member.
     *
     * @param roleId - The ID of the role to add to the member.
     * @returns A Promise that resolves once the role has been added to the member.
     */
    addRole(roleId: number): Promise<void>;
    /**
     * Remove role from this member.
     *
     * @param roleId - The ID of the role to remove from the member.
     * @returns A Promise that resolves once the role has been removed from the member.
     */
    removeRole(roleId: number): Promise<void>;
    /**
     * Kick this user from the server.
     *
     * @returns A Promise that resolves with the kicked member or null if the user is not a member of the server.
     */
    kick(): Promise<Member | null>;
    /**
     * Ban this user
     *
     * @returns A Promise that resolved to the created member ban.
     */
    ban(): Promise<MemberBan>;
}
/** A partial summary representation of a member. Can fetch this member to get full data */
export declare class PartialMember extends Base<UpgradedServerMemberSummaryPayload> {
    /** The ID of the server this role belongs to */
    readonly serverId: string;
    /** The user information of this member */
    readonly user: UserSummaryPayload;
    /** Roles this member has by ID (TODO: role object when Guilded API has one) */
    readonly roleIds: number[];
    constructor(client: Client, data: UpgradedServerMemberSummaryPayload);
    /**
     * Fetch the full member object of this partial member
     *
     * @returns A promise containing the resolved full member.
     */
    fetch(): Promise<Member>;
}
/**
 * Represents a banned member.
 */
export declare class MemberBan extends Base<UpgradedServerMemberBanPayload> {
    /** Id this ban was created in */
    serverId: string;
    /** Date this ban was created */
    _createdAt: number;
    /** The ID of user who banned this person */
    createdById: string;
    /** The reason this user was banned */
    reason: string | null;
    /** Information about the target user */
    target: UserSummaryPayload;
    /**
     * Creates a new instance of `MemberBan`.
     *
     * @param client - The Guilded client instance.
     * @param data - The data for this member ban.
     */
    constructor(client: Client, data: UpgradedServerMemberBanPayload);
    /**
     * Gets the creation date of this ban.
     *
     * @returns The creation date of this ban.
     */
    get createdAt(): Date;
    /**
     * Gets the user who banned this member.
     *
     * @returns The user who banned this member, or `null` if the user is not cached.
     */
    get author(): User | null;
    /**
     * Removes this ban.
     *
     * @returns A Promise that resolves to the unbanned member or `null` if the member is not cached.
     */
    unban(): Promise<MemberBan | null>;
}
//# sourceMappingURL=Member.d.ts.map