import type { ForumTopicPayload, MentionsPayload, ForumTopicSummaryPayload } from "@guildedjs/api";
import { Base } from "./Base";
import type { Client } from "./Client";
/**
 * Represents a forum topic in Guilded.
 */
export declare class ForumTopic extends Base<ForumTopicPayload, number> {
    /**
     * The server ID of the forum topic.
     */
    readonly serverId: string;
    /**
     * The channel ID of the forum topic.
     */
    readonly channelId: string;
    /**
     * The title of the forum topic.
     */
    title: string;
    /**
     * The creation date of the forum topic.
     */
    readonly _createdAt: number;
    /**
     * The user ID of the user who created the forum topic.
     */
    readonly createdBy: string;
    /**
     * The date time the forum topic was last updated, or null if it hasn't been updated.
     */
    _updatedAt: number | null;
    /**
     * The date time the forum topic was last bumped, or null if it hasn't been bumped.
     */
    _bumpedAt: number | null;
    /**
     * The date time the forum topic was deleted, or null if it hasn't been deleted.
     */
    _deletedAt: number | null;
    /**
     * Whether the forum topic is pinned.
     */
    isPinned: boolean;
    /**
     * Whether the forum topic is locked.
     */
    isLocked: boolean;
    /**
     * The content of the forum topic.
     */
    content: string;
    /**
     * The mentions in the forum topic.
     */
    mentions: MentionsPayload;
    constructor(client: Client, data: ForumTopicPayload);
    /**
     * Gets the creation date of the forum topic.
     *
     * @returns A Date object
     */
    get createdAt(): Date;
    /**
     * Gets the date the forum topic was deleted, or null if it hasn't been deleted.
     *
     * @returns A Date object
     */
    get deletedAt(): Date | null;
    /**
     * Gets the date the forum topic was last updated, or null if it hasn't been updated.
     *
     * @returns A Date object
     */
    get updatedAt(): Date | null;
    _update(data: Partial<ForumTopicPayload & {
        _deletedAt?: Date;
    }>): this;
}
/** A partial summary representation of a forum topic. Can fetch this topic to get full data */
export declare class PartialForumTopic extends Base<ForumTopicSummaryPayload, number> {
    /**
     * The ID of the server this role belongs to
     */
    readonly serverId: string;
    /**
     * The date time the forum topic was last updated, or null if it hasn't been updated.
     */
    _updatedAt: number | null;
    /**
     * The date time the forum topic was last bumped, or null if it hasn't been bumped.
     */
    _bumpedAt: number | null;
    /**
     * The title of the forum topic.
     */
    title: string;
    /**
     * Whether the forum topic is pinned.
     */
    isPinned: boolean;
    /**
     * The creation date of the forum topic.
     */
    readonly _createdAt: number;
    /**
     * The user ID of the user who created the forum topic.
     */
    readonly createdBy: string;
    /**
     * The channel ID of the forum topic.
     */
    readonly channelId: string;
    constructor(client: Client, data: ForumTopicSummaryPayload);
    _update(data: Partial<ForumTopicPayload & {
        _deletedAt?: Date;
    }>): this;
    /**
     * Gets the creation date of the forum topic.
     *
     * @returns A Date object
     */
    get createdAt(): Date;
    /**
     * Gets the date the forum topic was last updated, or null if it hasn't been updated.
     *
     * @returns A Date object
     */
    get updatedAt(): Date | null;
    /**
     * Fetch the full member object of this partial member
     *
     * @returns A promise containing the resolved full member.
     */
    fetch(): Promise<ForumTopic>;
}
//# sourceMappingURL=Forum.d.ts.map