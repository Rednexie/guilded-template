import type { ChatMessagePayload, EmotePayload, MentionsPayload, WSPayload } from "@guildedjs/api";
import type { MessageContent } from "../typings";
import { Base } from "./Base";
import type { Client } from "./Client";
import { Embed } from "./Embed";
import type { Member } from "./Member";
import type { Server } from "./Server";
import type { User } from "./User";
import type { Channel } from "./channels";
import type { ThreadChannel } from "./channels/ThreadChannel";
import type { CollectorOptions, CollectorReturnValue } from "./collectors/Collector";
export declare enum MessageType {
    Default = 0,
    System = 1
}
export declare class Message extends Base<ChatMessagePayload> {
    /** The ID of the channel */
    readonly channelId: string;
    /** The ID of the server this message belongs to */
    readonly serverId: string | null;
    /** The ID of the group this message was posted in */
    readonly groupId: string | null;
    /** The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated. */
    readonly type: MessageType;
    /** The content of the message */
    content: string;
    /** The mentions within this message */
    mentions?: MentionsPayload;
    /** The ID of the messages that this is replying to. */
    readonly replyMessageIds: string[];
    /** If set, this message will only be seen by those mentioned or replied to. */
    readonly isPrivate: boolean;
    /** If set, this message did not notify, mention or reply recipients. */
    readonly isSilent: boolean;
    /** The ID of the user who created this message (Note: If this event has createdByBotId or createdByWebhookId present, this field will still be populated, but can be ignored. In these cases, the value of this field will always be Ann6LewA) */
    readonly createdById: string;
    /** Bool value to wether message is a reply or not  */
    readonly isReply: boolean;
    /** The ID of the webhook who created this message, if it was created by a webhook */
    readonly createdByWebhookId: string | null;
    /** The timestamp that the message was created at. */
    readonly _createdAt: number;
    /** The timestamp that the message was updated at, if relevant */
    _updatedAt: number | null;
    /** Whether the message has been deleted */
    deleted: boolean;
    /** When the message was deleted, if it was */
    _deletedAt: number | null;
    /** Embeds contained within this message */
    embeds: Embed[];
    constructor(client: Client, data: ChatMessagePayload);
    /** Update details of this structure */
    _update(data: Partial<ChatMessagePayload> | {
        deletedAt: string;
    }): this;
    get createdAt(): Date;
    /**
     * Returns the date and time the message was last updated, if relevant.
     */
    get updatedAt(): Date | null;
    /**
     * Returns the date and time the message was deleted, if it was.
     */
    get deletedAt(): Date | null;
    /** Returns the url of this message */
    get url(): string;
    /**
     * Returns the author of this message, or null if the author is not cached.
     */
    get author(): User | null;
    /**
     * Returns the ID of the user who sent this message.
     */
    get authorId(): string;
    /**
     * Returns the member of this message, if the message is in a server, or null otherwise or if the member is not cached.
     */
    get member(): Member | null;
    /**
     * Returns the channel that this message belongs to, or null if the channel is not cached.
     */
    get channel(): Channel | null;
    get server(): Server | null;
    /**
     * Edit message content.
     *
     * @param newContent - The new content of the message.
     * @returns A promise that resolves with the updated message.
     */
    edit(newContent: MessageContent): Promise<Message>;
    /**
     * Send a message in the same channel as this message.
     *
     * @param content - The content of the message.
     * @example
     * let replyObj = {
     *  content: 'This is text, supports **markdown**.',
     *  embeds: [{
     *    title: 'This is an embed title!',
     *    description: 'A description may go here'
     *  }]
     * };
     * message.send(replyObj)
     */
    send(content: MessageContent): Promise<Message>;
    /**
     * Send a message that replies to this message. It mentions the user who sent this message.
     *
     * @param content - The content of the message to send.
     * @example
     * let replyObj = {
     *  content: 'This is text, supports **markdown**.',
     *  embeds: [{
     *    title: 'This is an embed title!',
     *    description: 'A description may go here'
     *  }]
     * };
     * message.reply(replyObj)
     */
    reply(content: MessageContent): Promise<Message>;
    createThread(name: string): Promise<ThreadChannel>;
    awaitReactions(options: CollectorOptions<MessageReaction>): Promise<CollectorReturnValue<MessageReaction>>;
    /**
     * Add a reaction emote.
     *
     * @param emoteId - The ID of the emote to add.
     * @returns A promise that resolves when the emote has been added.
     */
    addReaction(emoteId: number): Promise<void>;
    /**
     * Deletes either a whole reaction emote from a message or a specific user's if a userId is provided.
     *
     * @param emoteId - The ID of the emote to delete.
     * @returns A promise that resolves when the emote has been deleted.
     */
    deleteReaction(emoteId: number, userId?: string): Promise<void>;
    /**
     * Delete this message.
     *
     * @returns A promise that resolves when the message has been deleted.
     */
    delete(): Promise<void>;
}
/**
 * Represents a reaction to a message.
 */
export declare class MessageReaction extends Base<FlattenedReactionData> {
    /**
     * The ID of the channel where the message was sent.
     */
    readonly channelId: string;
    /**
     * The ID of the message this reaction belongs to.
     */
    readonly messageId: string;
    /**
     * The ID of the user who created the reaction.
     */
    readonly createdBy: string;
    /**
     * The emote associated with this reaction.
     */
    readonly emote: EmotePayload;
    /**
     * The ID of the server where the reaction was made.
     */
    readonly serverId: string;
    /**
     * Creates a new instance of the MessageReaction class.
     *
     * @param client The client that instantiated this object.
     * @param data The data representing the reaction.
     */
    constructor(client: Client, data: FlattenedReactionData);
}
type FlattenedReactionData = WSPayload<"ChannelMessageReactionCreated">["reaction"] & {
    serverId: string;
};
export {};
//# sourceMappingURL=Message.d.ts.map