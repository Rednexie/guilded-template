import type { ServerPayload } from "@guildedjs/api";
import { Base } from "./Base";
import type { Client } from "./Client";
import type { Member } from "./Member";
import type { Channel } from "./channels";
/**
 * A class representing a Guilded server.
 */
export declare class Server extends Base<ServerPayload> {
    /** The ID of the owner of this server */
    ownerId: string;
    /** The type of this server */
    type: ServerType | null;
    /** The name of this server */
    name: string;
    /** The slug of the URL this server is accessible from */
    shortURL: string;
    /** The description of this server */
    description: string | null;
    /** The icon of this server */
    iconURL: string | null;
    /** The banner of this server */
    bannerURL: string | null;
    /** The timezone this server is in */
    timezone: string | null;
    /** Whether this server is verified or not */
    isVerified: boolean;
    /** The default channel of this server */
    defaultChannelId: string;
    /** The date this server was created */
    _createdAt: number;
    constructor(client: Client, data: ServerPayload);
    /** The date when the server was created. */
    get createdAt(): Date;
    /** The URL of the server. */
    get url(): string;
    /** The owner of the server. */
    get owner(): Member | null;
    /** The default channel of the server. */
    get defaultChannel(): Channel | null;
    _update(data: Partial<ServerPayload>): this;
}
/** The type of a Guilded server. */
export declare enum ServerType {
    Team = 0,
    Organization = 1,
    Community = 2,
    Clan = 3,
    Guild = 4,
    Friends = 5,
    Streaming = 6,
    Other = 7
}
/** A mapping of server types from the API to the client. */
export declare const ServerTypeMap: Record<NonNullable<ServerPayload["type"]>, ServerType>;
//# sourceMappingURL=Server.d.ts.map