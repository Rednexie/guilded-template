import type { GroupPayload } from "@guildedjs/api";
import { Base } from "./Base";
import type { Client } from "./Client";
/**
 * A group in a server in Guilded
 */
export declare class Group extends Base<GroupPayload> {
    /** The name of the group */
    name: string;
    /** The description of the group */
    description: string;
    /** The ID of the server this group is in */
    serverId: string;
    /** The ID of the user who created this group */
    createdBy: string;
    /** The date this group was created at */
    createdAt: Date;
    /** The date this group was last updated at */
    updatedAt: Date;
    avatar: string;
    isHome: boolean;
    emoteId: number;
    isPublic: boolean;
    updatedBy: string;
    archivedAt: Date | null;
    archivedBy: string | null;
    constructor(client: Client, data: GroupPayload);
    _update(data: GroupPayload): this;
    /**
     * Adds a member to the group.
     *
     * @param memberId The ID of the member to add.
     * @returns A Promise that resolves with no result on success.
     */
    addMember(memberId: string): Promise<void>;
    /**
     * Removes a member from the group.
     *
     * @param memberId The ID of the member to remove.
     * @returns A Promise that resolves with no result on success.
     */
    removeMember(memberId: string): Promise<void>;
}
//# sourceMappingURL=Group.d.ts.map