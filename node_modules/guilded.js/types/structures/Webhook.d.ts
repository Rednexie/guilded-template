import type { WebhookPayload } from "@guildedjs/api";
import type { GlobalWebhookManager } from "../managers/global";
import { Base } from "./Base";
import type { Client } from "./Client";
import type { User } from "./User";
/**
 * Object representing received webhook data. This object is NOT to be used to send data to webhooks. That would be WebhookClient
 */
export declare class Webhook extends Base<WebhookPayload> {
    /**
     * The username belonging to this webhook
     */
    name: string;
    /**
     * The ID of the channel this webhook belongs to
     */
    channelID: string;
    /**
     * The ID of the server this webhook belongs to
     */
    readonly serverId: string;
    /**
     * The date in which this webhook was created
     */
    _createdAt: number;
    /**
     * The date this webhook was deleted if it was deleted
     */
    _deletedAt: number | null;
    /**
     * The user who created this webhook
     */
    readonly authorID: string;
    /**
     * The token of this webhook
     */
    token: string | null;
    constructor(client: Client, data: WebhookPayload);
    /**
     * Returns the creation date of this webhook
     *
     * @returns The creation date of this webhook
     */
    get createdAt(): Date;
    /**
     * Returns the deletion date of this webhook if it was deleted
     *
     * @returns The deletion date of this webhook if it was deleted, otherwise null
     */
    get deletedAt(): Date | null;
    /**
     * Returns the author of this webhook
     *
     * @returns The author of this webhook, or null if the author is not cached
     */
    get user(): User | null;
    /**
     * Updates this webhook with new options
     *
     * @param options The new options for this webhook
     * @returns A promise that resolves with the updated webhook
     */
    update(options: Parameters<GlobalWebhookManager["update"]>[2]): Promise<Webhook>;
    /**
     * Deletes this webhook
     *
     * @returns A promise that resolves with this webhook after it has been deleted
     */
    delete(): Promise<this>;
    _update(data: Partial<WebhookPayload>): this;
}
//# sourceMappingURL=Webhook.d.ts.map