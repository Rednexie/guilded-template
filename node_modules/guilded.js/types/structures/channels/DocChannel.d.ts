import { Collection } from "@discordjs/collection";
import type { DocPayload, DocsService } from "@guildedjs/api";
import type { OptionBody } from "../../typings";
import { Channel } from "./Channel";
/**
 * Represents a doc channel on Guilded
 *
 * @extends Channel
 */
export declare class DocChannel extends Channel {
    /**
     * The docs in this channel.
     */
    readonly docs: Collection<number, DocPayload>;
    /**
     * Create a new doc in this channel.
     *
     * @param options - The options for creating the doc.
     * @returns A promise that resolves with the created doc.
     */
    createDoc(options: OptionBody<DocsService["docCreate"]>): Promise<DocPayload>;
    /**
     * Get all the docs from this channel.
     *
     * @returns A promise that resolves with an array of all docs.
     */
    getDocs(): Promise<DocPayload[]>;
    /**
     * Get a specific doc from this channel.
     *
     * @param docId - The ID ofDocPayload the doc to fetch.
     * @returns A promise that resolves with the fetched doc.
     */
    getDoc(docId: number): Promise<DocPayload>;
    /**
     * Update a specific doc in this channel.
     *
     * @param docId - The ID of the doc to update.
     * @param options - The options for updating the doc.
     * @returns A promise that resolves with the updated doc.
     */
    updateDoc(docId: number, options: OptionBody<DocsService["docUpdate"]>): Promise<DocPayload>;
    /**
     * Delete a specific doc from this channel.
     *
     * @param docId - The ID of the doc to delete.
     * @returns A promise that resolves with no data.
     */
    deleteDoc(docId: number): Promise<void>;
}
//# sourceMappingURL=DocChannel.d.ts.map