import type { RolePayload } from "@guildedjs/api";
import { Base } from "./Base";
import type { Client } from "./Client";
/**
 * Represents a Guilded role in a server
 */
export declare class Role extends Base<{
    id: number;
    serverId: string;
}, number> {
    /** The ID of the server this role belongs to */
    readonly serverId: string;
    /** The date this role was created */
    _createdAt: number;
    /** The date this role was last updated, if it was */
    _updatedAt: number | null;
    /** The name of this role */
    name: string;
    /** Whether this role is hoisted or not */
    isDisplayedSeparately: boolean;
    /** Whether this role is self assignable by members */
    isSelfAssignable: boolean;
    /** Whether this role is mentionable */
    isMentionable: boolean;
    /** The permissions this role has */
    permissions: string[];
    /** The colors belonging to this role. If a solid color role, then there will be just one color in this array. Otherwise, the first color is the solid color, and second is a gradient.  */
    colors: number[];
    /** The URL of the role's icon */
    icon: string | null;
    /** The position of this role on the hierarchy */
    position: number;
    /** Whether this is the default role for members */
    isBase: boolean;
    /** The bot user ID this role has been defined for. */
    botUserId: string | null;
    /**
     * @param client - The client instance
     * @param data - The data for this role
     */
    constructor(client: Client, data: RolePayload);
    _update(data: RolePayload): this;
    get createdAt(): Date;
    /**
     * Returns the date and time the message was last updated, if relevant.
     */
    get updatedAt(): Date | null;
    /**
     * Award XP to a role
     *
     * @param amount - The amount of XP to award to the role
     * @returns A Promise that resolves to the new total XP of the role
     */
    giveXP(amount: number): Promise<void>;
    /**
     * Assign role to member
     *
     * @param memberId - The ID of the member to assign the role to
     * @returns A Promise that resolves when the role has been assigned to the member
     */
    assignToMember(memberId: string): Promise<void>;
    /**
     * Remove role from member
     *
     * @param memberId - The ID of the member to remove the role from
     * @returns A Promise that resolves when the role has been removed from the member
     */
    removeFromMember(memberId: string): Promise<void>;
}
//# sourceMappingURL=Role.d.ts.map