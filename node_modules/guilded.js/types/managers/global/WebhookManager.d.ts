import { Collection } from "@discordjs/collection";
import type { WebhookService } from "@guildedjs/api";
import { Webhook } from "../../structures/Webhook";
import type { OptionBody } from "../../typings";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * A manager for interacting with global webhooks. You can retrieve webhooks from the .cache property
 *
 * @extends CacheableStructManager
 */
export declare class GlobalWebhookManager extends CacheableStructManager<string, Webhook> {
    get shouldCacheWebhook(): boolean;
    /**
     * Create a webhook
     *
     * @param serverId The ID of the server to create the webhook for
     * @param options The options for creating the webhook
     * @returns A Promise that resolves to the created webhook
     */
    create(serverId: string, options: OptionBody<WebhookService["webhookCreate"]>): Promise<Webhook>;
    /**
     * Get a server's webhooks
     *
     * @param serverId The ID of the server to get webhooks for
     * @param channelId The ID of the channel to get webhooks for
     * @returns A Promise that resolves to a Collection of Webhooks
     */
    fetchMany(serverId: string, channelId: string): Promise<Collection<string, Webhook>>;
    /**
     * Get a webhook
     *
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook
     * @param force Whether to skip the cache check and request the API
     * @returns A Promise that resolves to the fetched webhook
     */
    fetch(serverId: string, webhookId: string, force?: boolean): Promise<Webhook>;
    /**
     * Update a webhook
     *
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook to update
     * @param options The options for updating the webhook
     * @returns A Promise that resolves to the updated Webhook
     */
    update(serverId: string, webhookId: string, options: OptionBody<WebhookService["webhookUpdate"]>): Promise<Webhook>;
    /**
     * Delete a webhook
     *
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook to delete
     * @returns A Promise that resolves with no value upon successful deletion
     */
    delete(serverId: string, webhookId: string): Promise<void>;
}
//# sourceMappingURL=WebhookManager.d.ts.map