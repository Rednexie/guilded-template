import { Collection } from "@discordjs/collection";
import type { ForumsService } from "@guildedjs/api";
import { ForumTopic, PartialForumTopic } from "../../structures/Forum";
import type { OptionBody, OptionQuery } from "../../typings";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * Manager for interacting with forum topics at a global level.
 */
export declare class GlobalForumTopicManager extends CacheableStructManager<number, ForumTopic> {
    get shouldCacheForumTopic(): boolean;
    /**
     * Create a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param options The options for creating the forum topic.
     * @returns A Promise that resolves with the payload of the created forum topic.
     */
    create(channelId: string, options: OptionBody<ForumsService["forumTopicCreate"]>): Promise<ForumTopic>;
    /**
     * Get all topics in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param options The options for filtering the forum topics.
     * @returns A Promise that resolves to a Collection of ForumTopics.
     */
    fetchMany(channelId: string, options: Omit<OptionQuery<ForumsService["forumTopicReadMany"]>, "channelId">): Promise<Collection<number, PartialForumTopic>>;
    /**
     * Get a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @returns a Promise that resolves to a ForumTopic.
     */
    fetch(channelId: string, forumTopicId: number): Promise<ForumTopic>;
    /**
     * Update a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @param options The options for updating the forum topic.
     * @returns A Promise that resolves to the updated ForumTopic. If cached locally, it will modify that object.
     */
    update(channelId: string, forumTopicId: number, options: OptionBody<ForumsService["forumTopicUpdate"]>): Promise<ForumTopic>;
    /**
     * Delete a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @returns A Promise that resolves to nothing.
     */
    delete(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Pin a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @returns A Promise that resolves to nothing.
     */
    pin(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Unpin a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @returns A Promise that resolves to nothing.
     */
    unpin(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Lock a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID of the forum topic.
     * @returns A Promise that resolves to nothing.
     */
    lock(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Unlock a topic in a forum.
     *
     * @param channelId The ID of the channel containing the forum.
     * @param forumTopicId The ID
     * @returns A Promise that resolves to nothing.
     */
    unlock(channelId: string, forumTopicId: number): Promise<void>;
}
//# sourceMappingURL=ForumManager.d.ts.map