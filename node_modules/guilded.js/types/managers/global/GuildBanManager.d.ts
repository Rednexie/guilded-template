import { Collection } from "@discordjs/collection";
import { MemberBan } from "../../structures/Member";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * Manages guild bans in all servers.
 */
export declare class GlobalGuildBanManager extends CacheableStructManager<string, MemberBan> {
    /**
     * Returns whether bans should be cached.
     */
    get shouldCacheBan(): boolean;
    /**
     * Fetches a member ban in a server.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the user.
     * @param force Whether to force fetch the ban even if it's cached.
     * @returns A Promise that resolves with the fetched member ban.
     */
    fetch(serverId: string, userId: string, force?: boolean): Promise<MemberBan>;
    /**
     * Fetches all bans in a server.
     *
     * @param serverId The ID of the server.
     * @returns A Promise that resolves with a collection of the fetched member bans.
     */
    fetchMany(serverId: string): Promise<Collection<string, MemberBan>>;
    /**
     * Bans a user from a server.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the user.
     * @returns A Promise that resolves with the newly created member ban.
     */
    ban(serverId: string, userId: string): Promise<MemberBan>;
    /**
     * Unbans a user from a server.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the user.
     * @param removeBanIfCached Whether to remove the ban from the cache if it exists.
     * @returns A Promise that resolves with the unbanned member ban or `null` if it isn't cached.
     */
    unban(serverId: string, userId: string, removeBanIfCached?: boolean): Promise<MemberBan | null>;
}
//# sourceMappingURL=GuildBanManager.d.ts.map