import { Collection } from "@discordjs/collection";
import type { GroupsService } from "@guildedjs/api";
import { Group } from "../../structures";
import type { OptionBody } from "../../typings";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * Manager for interacting with Groups on Guilded.
 */
export declare class GlobalGroupManager extends CacheableStructManager<string, Group> {
    /**
     * Creates a group.
     *
     * @param serverId The ID of the server to create the group in.
     * @param options The options for the group to create.
     * @returns A Promise that resolves with the created group.
     */
    create(serverId: string, options: OptionBody<GroupsService["groupCreate"]>): Promise<Group>;
    /**
     * Fetch a group
     *
     * @param serverId The ID of the server to fetch the group from.
     * @param groupId The ID of the group to fetch.
     * @returns A Promise that resolves with the fetched group.
     */
    fetch(serverId: string, groupId: string): Promise<Group>;
    /**
     * Fetch all the groups in a server
     *
     * @param serverId The ID of the server to fetch the groups from.
     * @returns A Promise that resolves a Collection containing the fetched groups.
     */
    fetchMany(serverId: string): Promise<Collection<string, Group>>;
    /**
     * Update a group
     *
     * @param serverId The ID of the server to update the group in.
     * @param groupId The ID of the group to update.
     * @param options The options to update the group with.
     * @returns A Promise that resolves with the updated group.
     */
    update(serverId: string, groupId: string, options: OptionBody<GroupsService["groupUpdate"]>): Promise<Group>;
    /**
     * Delete a group
     *
     * @param serverId The ID of the server to delete the group from.
     * @param groupId The ID of the group to delete.
     * @returns A Promise that resolves when the operation is complete.
     */
    delete(serverId: string, groupId: string): Promise<void>;
    /**
     * Adds a member to a group.
     *
     * @param groupId The ID of the group.
     * @param userId The ID of the user to add.
     * @returns A Promise that resolves when the operation is complete.
     */
    addMember(groupId: string, userId: string): Promise<void>;
    /**
     * Removes a member from a group.
     *
     * @param groupId The ID of the group.
     * @param userId The ID of the user to remove.
     * @returns A Promise that resolves when the operation is complete.
     */
    removeMember(groupId: string, userId: string): Promise<void>;
}
//# sourceMappingURL=GroupManager.d.ts.map