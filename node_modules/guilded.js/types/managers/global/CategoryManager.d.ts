import type { CategoriesService } from "@guildedjs/api";
import { Category } from "../../structures/Category";
import type { OptionBody } from "../../typings";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * Manager for interacting with Catregories on Guilded.
 */
export declare class GlobalCategoryManager extends CacheableStructManager<number, Category> {
    /**
     * Create a new category
     *
     * @param serverId The ID of the server to create the category in.
     * @param options Category creation options
     * @returns Promise that resolves with the newly created category
     */
    create(serverId: string, options: OptionBody<CategoriesService["categoryCreate"]>): Promise<Category>;
    fetch(serverId: string, categoryId: number): Promise<Category>;
    /**
     * Update a category
     *
     * @param serverId The ID of the server to update the category in.
     * @param categoryId The ID of the category to update.
     * @param options The options to update the category with.
     * @returns A Promise that resolves with the updated category.
     */
    update(serverId: string, categoryId: number, options: OptionBody<CategoriesService["categoryUpdate"]>): Promise<Category>;
    /**
     * Delete a category
     *
     * @param serverId The ID of the server to delete the category from.
     * @param categoryId The ID of the category to delete.
     * @returns A Promise that resolves when the operation is complete.
     */
    delete(serverId: string, categoryId: number): Promise<void>;
}
//# sourceMappingURL=CategoryManager.d.ts.map