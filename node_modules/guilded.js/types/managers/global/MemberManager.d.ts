import { Collection } from "@discordjs/collection";
import type { SocialLinkPayload } from "@guildedjs/api";
import type { MemberBan } from "../../structures/Member";
import { Member, PartialMember } from "../../structures/Member";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * A class representing a manager for Discord server members.
 *
 */
export declare class GlobalMemberManager extends CacheableStructManager<string, Member> {
    /**
     * Whether or not social links should be cached.
     */
    get shouldCacheSocialLinks(): boolean;
    /**
     * Fetches a member from a server.
     *
     * @param serverId The ID of the server to fetch the member from.
     * @param userId The ID of the member to fetch.
     * @param force Whether to force a fetch from the API.
     * @returns A Promise that resolves with the fetched member.
     */
    fetch(serverId: string, userId: string, force?: boolean): Promise<Member>;
    /**
     * Fetches all members from a server. Returned objects are partial members.
     *
     * @param serverId The ID of the server to fetch members from.
     * @returns A Promise that resolves with a collection of partial members.
     */
    fetchMany(serverId: string): Promise<Collection<string, PartialMember>>;
    /**
     * Kicks a member from a server.
     *
     * @param serverId The ID of the server to kick the member from.
     * @param userId The ID of the member to kick.
     * @returns A Promise that resolves with the kicked member, or null if the member was not cached.
     */
    kick(serverId: string, userId: string): Promise<Member | null>;
    /**
     * Bans a member from a server.
     *
     * @param serverId The ID of the server to ban the member from.
     * @param userId The ID of the user to ban.
     * @returns A Promise that resolves with the banned member, or null if the member was not cached.
     */
    ban(serverId: string, userId: string): Promise<MemberBan | null>;
    /**
     * Unbans a user from a server.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the user.
     * @param removeBanIfCached Whether to remove the ban from the cache if it exists.
     * @returns A Promise that resolves with the unbanned member ban or `null` if it isn't cached.
     */
    unban(serverId: string, userId: string, removeBanIfCached?: boolean): Promise<MemberBan | null>;
    /**
     * Gets a list of the roles assigned to a member using the ID of the member.
     *
     * @param serverId The ID of the server to get the member roles from.
     * @param userId The ID of the member to get the roles for.
     * @returns A Promise that resolves with an array of role IDs.
     */
    getRoles(serverId: string, userId: string): Promise<number[]>;
    /**
     * Updates a member's nickname. Returns the new name.
     *
     * @param serverId The ID of the server to update the member nickname for.
     * @param userId The ID of the member to update the nickname for.
     * @param newNickname The new nickname for the member.
     * @returns A Promise that resolves with the updated nickname.
     */
    updateNickname(serverId: string, userId: string, newNickname: string): Promise<string>;
    /**
     * Deletes a member's nickname.
     *
     * @param serverId The ID of the server to delete the member nickname from.
     * @param userId The ID of the member to delete the nickname for.
     * @returns A Promise that resolves with no value upon completion.
     */
    resetNickname(serverId: string, userId: string): Promise<void>;
    /**
     * Awards XP to a member.
     *
     * @param serverId The ID of the server to award XP on.
     * @param userId The ID of the member to award XP to.
     * @param amount The amount of XP to award.
     * @returns A Promise that resolves with the member's new total XP.
     */
    giveXP(serverId: string, userId: string, amount: number): Promise<number>;
    /**
     * Fetch a member's social links.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the member.
     * @param type The type of social link to fetch.
     * @returns A Promise that resolves with the member's social link.
     */
    fetchSocialLinks(serverId: string, userId: string, type: SocialLinkPayload["type"]): Promise<SocialLinkPayload>;
}
//# sourceMappingURL=MemberManager.d.ts.map