import { Collection } from "@discordjs/collection";
import type { RolesService } from "@guildedjs/api";
import { Role } from "../../structures";
import type { OptionBody } from "../../typings";
import { CacheableStructManager } from "./CacheableStructManager";
/**
 * A class representing a global role manager. At the moment, we don't cache roles in this structure.
 */
export declare class GlobalRoleManager extends CacheableStructManager<number, Role> {
    /**
     * Create a new role.
     *
     * @param serverId The ID of the server.
     * @param options Role creation options.
     * @returns Promise that resolves with the newly created role.
     */
    create(serverId: string, options: OptionBody<RolesService["roleCreate"]>): Promise<Role>;
    /**
     * Fetch a role by its ID
     *
     * @param serverId The ID of the server.
     * @param roleId ID of the role to fetch.
     * @param force Whether or not to force a fetch from the API.
     * @returns Promise that resolves with the fetched role.
     */
    fetch(serverId: string, roleId: number, force?: boolean): Promise<Role>;
    /**
     * Fetch all roles in a given server.
     *
     * @param serverId The ID of the server.
     * @returns Promise that resolves with a Collection of fetched roles.
     */
    fetchMany(serverId: string): Promise<Collection<number, Role>>;
    /**
     * Update a role by ID.
     *
     * @param serverId The ID of the server.
     * @param roleId ID of the role to update.
     * @param options Role update options.
     * @returns Promise that resolves with the updated role.
     */
    update(serverId: string, roleId: number, options: OptionBody<RolesService["roleUpdate"]>): Promise<Role>;
    /**
     * Delete a role by ID.
     *
     * @param serverId ID of the server to delete the role.
     * @param roleId ID of the role to delete.
     * @returns Promise that resolves with the cached deleted role, or null if the role isn't present in the cache.
     */
    delete(serverId: string, roleId: number): Promise<Role | null>;
    /**
     * Updates the permissions of a role.
     *
     * @param serverId The ID of the server.
     * @param roleId The ID of the role.
     * @param options Role permission update options.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    updatePermissions(serverId: string, roleId: number, options: OptionBody<RolesService["rolePermissionUpdate"]>): Promise<void>;
    /**
     * Awards XP to a role.
     *
     * @param serverId The ID of the server.
     * @param roleId The ID of the role.
     * @param amount The amount of XP to award.
     * @returns A Promise that resolves with the total XP awarded to the role.
     */
    giveXP(serverId: string, roleId: number, amount: number): Promise<void>;
    /**
     * Assigns a role to a member.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the member.
     * @param roleId The ID of the role.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    addRoleToMember(serverId: string, userId: string, roleId: number): Promise<void>;
    /**
     * Removes a role from a member.
     *
     * @param serverId The ID of the server.
     * @param userId The ID of the member.
     * @param roleId The ID of the role.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    removeRoleFromMember(serverId: string, userId: string, roleId: number): Promise<void>;
}
//# sourceMappingURL=RoleManager.d.ts.map