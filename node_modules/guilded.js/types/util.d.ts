import type { ChatEmbed } from "@guildedjs/api/types/generated/router/models/ChatEmbed";
import type { MessageContent } from "./typings";
/**
 * Valid image file extensions
 */
export declare enum IMG_EXTENSION {
    GIF = "gif",
    PNG = "png",
    WEBP = "webp"
}
/**
 * Options for image size
 */
export type IMG_SIZE = "Large" | "Medium" | "Small";
/**
 * Object containing functions to build Guilded asset URLs
 */
export declare const ASSET_BUILDER: {
    /**
     * Function to build a Guilded user avatar URL
     *
     * @param hash - The hash of the user's avatar
     * @param size - The size of the avatar (optional)
     * @returns A URL string for the user avatar
     */
    AVATAR_URL: (hash: string, size?: IMG_SIZE) => string;
    /**
     * Function to build a Guilded chat message image URL
     *
     * @param hash - The hash of the image
     * @param size - The size of the image (optional)
     * @param width - The width of the image (optional)
     * @param height - The height of the image (optional)
     * @returns A URL string for the image in a chat message
     */
    IMAGE_IN_CHAT: (hash: string, size?: string, width?: number, height?: number) => string;
    /**
     * Function to build a Guilded user profile banner URL
     *
     * @param hash - The hash of the user's banner
     * @param size - The size of the banner (optional)
     * @param width - The width of the banner (optional)
     * @param height - The height of the banner (optional)
     * @returns A URL string for the user profile banner
     */
    PROFILE_BANNER: (hash: string, size?: string, width?: number, height?: number) => string;
    /**
     * Builds a URL for a server banner asset.
     *
     * @param hash - The hash of the banner asset.
     * @param size - The size of the banner asset. Default value is "Hero".
     * @param width - The width of the banner asset. Defaults to undefined.
     * @param height - The height of the banner asset. Defaults to undefined.
     * @returns The URL of the server banner asset.
     */
    SERVER_BANNER: (hash: string, size?: string, width?: number, height?: number) => string;
    /**
     * Builds a URL for a server emoji asset.
     *
     * @param hash - The hash of the emoji asset.
     * @param size - The size of the emoji asset. Default value is "Full".
     * @param extension - The extension of the emoji asset. Default value is "WEBP".
     * @param width - The width of the emoji asset. Defaults to undefined.
     * @param height - The height of the emoji asset. Defaults to undefined.
     * @returns The URL of the server emoji asset.
     */
    SERVER_EMOJI: (hash: string, size?: string, extension?: "APNG" | "WEBP", width?: number, height?: number) => string;
    /**
     * Builds a URL for a server icon asset.
     *
     * @param hash - The hash of the icon asset.
     * @param size - The size of the icon asset. Default value is "Medium".
     * @returns The URL of the server icon asset.
     */
    SERVER_ICON: (hash: string, size?: "Large" | "Medium" | "Small") => string;
};
/**
 * Builds a key for a member object in a server for use in cache management.
 *
 * @param serverId - The ID of the server.
 * @param memberId - The ID of the member.
 * @returns The key for the member object.
 */
export declare const buildMemberKey: (serverId: string, memberId: string) => string;
/**
 * Builds a key for a reaction object in a message for use in cache management.
 *
 * @param messageId - The ID of the message.
 * @param userId - The ID of the user.
 * @param emoteId - The ID of the emote.
 * @returns The key for the reaction object.
 */
export declare const buildMessageReactionKey: (messageId: string, userId: string, emoteId: number) => string;
/**
 * Builds a key for a reaction object.
 *
 * @param userId - The ID of the user.
 * @param emoteId - The ID of the emote.
 * @returns The key for the reaction object.
 */
export declare const buildReactionKey: (userId: string, emoteId: number) => string;
export declare const buildCalendarRsvpKey: (calendarEventId: number, userId: string) => string;
/**
 * Resolves message content to REST message data.
 *
 * @param content - The content of the message. Can be a string or an instance of an Embed object.
 * @returns REST message data.
 */
export declare const resolveContentToData: (content: MessageContent) => {
    content?: string | undefined;
    embeds?: ChatEmbed[] | undefined;
};
/**
 * Convert date to a timestamp
 *
 * @param date - The date to convert
 */
export declare function parseToStamp(date: string | undefined): number | null;
//# sourceMappingURL=util.d.ts.map