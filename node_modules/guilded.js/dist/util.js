"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseToStamp = exports.resolveContentToData = exports.buildCalendarRsvpKey = exports.buildReactionKey = exports.buildMessageReactionKey = exports.buildMemberKey = exports.ASSET_BUILDER = exports.IMG_EXTENSION = void 0;
const node_url_1 = require("node:url");
const api_1 = require("@guildedjs/api");
const Embed_1 = require("./structures/Embed");
/**
 * Valid image file extensions
 */
var IMG_EXTENSION;
(function (IMG_EXTENSION) {
    IMG_EXTENSION["GIF"] = "gif";
    IMG_EXTENSION["PNG"] = "png";
    IMG_EXTENSION["WEBP"] = "webp";
})(IMG_EXTENSION = exports.IMG_EXTENSION || (exports.IMG_EXTENSION = {}));
/**
 * Function to build a Guilded asset URL
 *
 * @param route - The API route for the asset
 * @param hash - The hash of the asset
 * @param extension - The file extension of the asset
 * @param width - The width of the asset (optional)
 * @param height - The height of the asset (optional)
 * @param size - The size of the asset (optional)
 * @returns A URL string for the asset
 */
const formAssetURL = (route, hash, extension, width, height, size) => {
    const url = new node_url_1.URL(`https://${api_1.DOMAINS.IMAGE_CDN_DOMAIN}/${route}/${hash}-${size}.${extension.toLowerCase()}`);
    if (width)
        url.searchParams.append("w", width.toString());
    if (height)
        url.searchParams.append("h", height.toString());
    return url.toString();
};
/**
 * Object containing functions to build Guilded asset URLs
 */
exports.ASSET_BUILDER = {
    /**
     * Function to build a Guilded user avatar URL
     *
     * @param hash - The hash of the user's avatar
     * @param size - The size of the avatar (optional)
     * @returns A URL string for the user avatar
     */
    AVATAR_URL: (hash, size = "Medium") => formAssetURL("UserAvatar", hash, IMG_EXTENSION.PNG, undefined, undefined, size),
    /**
     * Function to build a Guilded chat message image URL
     *
     * @param hash - The hash of the image
     * @param size - The size of the image (optional)
     * @param width - The width of the image (optional)
     * @param height - The height of the image (optional)
     * @returns A URL string for the image in a chat message
     */
    IMAGE_IN_CHAT: (hash, size = "Full", width, height) => formAssetURL("ContentMedia", hash, IMG_EXTENSION.WEBP, width, height, size),
    /**
     * Function to build a Guilded user profile banner URL
     *
     * @param hash - The hash of the user's banner
     * @param size - The size of the banner (optional)
     * @param width - The width of the banner (optional)
     * @param height - The height of the banner (optional)
     * @returns A URL string for the user profile banner
     */
    PROFILE_BANNER: (hash, size = "Hero", width, height) => formAssetURL("UserBanner", hash, IMG_EXTENSION.PNG, width, height, size),
    /**
     * Builds a URL for a server banner asset.
     *
     * @param hash - The hash of the banner asset.
     * @param size - The size of the banner asset. Default value is "Hero".
     * @param width - The width of the banner asset. Defaults to undefined.
     * @param height - The height of the banner asset. Defaults to undefined.
     * @returns The URL of the server banner asset.
     */
    SERVER_BANNER: (hash, size = "Hero", width, height) => formAssetURL("TeamBanner", hash, IMG_EXTENSION.PNG, width, height, size),
    /**
     * Builds a URL for a server emoji asset.
     *
     * @param hash - The hash of the emoji asset.
     * @param size - The size of the emoji asset. Default value is "Full".
     * @param extension - The extension of the emoji asset. Default value is "WEBP".
     * @param width - The width of the emoji asset. Defaults to undefined.
     * @param height - The height of the emoji asset. Defaults to undefined.
     * @returns The URL of the server emoji asset.
     */
    SERVER_EMOJI: (hash, size = "Full", extension = "WEBP", width, height) => formAssetURL("CustomReaction", hash, extension.toLowerCase(), width, height, size),
    /**
     * Builds a URL for a server icon asset.
     *
     * @param hash - The hash of the icon asset.
     * @param size - The size of the icon asset. Default value is "Medium".
     * @returns The URL of the server icon asset.
     */
    SERVER_ICON: (hash, size = "Medium") => formAssetURL("TeamAvatar", hash, IMG_EXTENSION.PNG, undefined, undefined, size),
};
/**
 * Builds a key for a member object in a server for use in cache management.
 *
 * @param serverId - The ID of the server.
 * @param memberId - The ID of the member.
 * @returns The key for the member object.
 */
const buildMemberKey = (serverId, memberId) => {
    return `${serverId}:${memberId}`;
};
exports.buildMemberKey = buildMemberKey;
/**
 * Builds a key for a reaction object in a message for use in cache management.
 *
 * @param messageId - The ID of the message.
 * @param userId - The ID of the user.
 * @param emoteId - The ID of the emote.
 * @returns The key for the reaction object.
 */
const buildMessageReactionKey = (messageId, userId, emoteId) => {
    return `${messageId}:${userId}:${emoteId}`;
};
exports.buildMessageReactionKey = buildMessageReactionKey;
/**
 * Builds a key for a reaction object.
 *
 * @param userId - The ID of the user.
 * @param emoteId - The ID of the emote.
 * @returns The key for the reaction object.
 */
const buildReactionKey = (userId, emoteId) => {
    return `${userId}:${emoteId}`;
};
exports.buildReactionKey = buildReactionKey;
const buildCalendarRsvpKey = (calendarEventId, userId) => {
    return `${calendarEventId}:${userId}`;
};
exports.buildCalendarRsvpKey = buildCalendarRsvpKey;
/**
 * Resolves message content to REST message data.
 *
 * @param content - The content of the message. Can be a string or an instance of an Embed object.
 * @returns REST message data.
 */
const resolveContentToData = (content) => {
    var _a;
    if (typeof content === "string")
        return { content };
    if (content instanceof Embed_1.Embed)
        return { embeds: [content.toJSON()] };
    return Object.assign(Object.assign({}, content), { embeds: (_a = content.embeds) === null || _a === void 0 ? void 0 : _a.map((x) => (x instanceof Embed_1.Embed ? x.toJSON() : x)) });
};
exports.resolveContentToData = resolveContentToData;
/**
 * Convert date to a timestamp
 *
 * @param date - The date to convert
 */
function parseToStamp(date) {
    return date ? Date.parse(date) : null;
}
exports.parseToStamp = parseToStamp;
//# sourceMappingURL=util.js.map