"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialForumTopic = exports.ForumTopic = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * Represents a forum topic in Guilded.
 */
class ForumTopic extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.serverId = data.serverId;
        this.channelId = data.channelId;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.createdBy = data.createdBy;
        this.isPinned = false;
        this.isLocked = false;
        this._deletedAt = null;
        this._update(data);
    }
    /**
     * Gets the creation date of the forum topic.
     *
     * @returns A Date object
     */
    get createdAt() {
        return new Date(this._createdAt);
    }
    /**
     * Gets the date the forum topic was deleted, or null if it hasn't been deleted.
     *
     * @returns A Date object
     */
    get deletedAt() {
        return this._deletedAt ? new Date(this._deletedAt) : null;
    }
    /**
     * Gets the date the forum topic was last updated, or null if it hasn't been updated.
     *
     * @returns A Date object
     */
    get updatedAt() {
        return this._updatedAt ? new Date(this._updatedAt) : null;
    }
    _update(data) {
        if ("updatedAt" in data && typeof data.updatedAt !== "undefined") {
            this._updatedAt = data.updatedAt ? (0, util_1.parseToStamp)(data.updatedAt) : null;
        }
        if ("_deletedAt" in data && typeof data._deletedAt !== "undefined") {
            this._deletedAt = data._deletedAt.getTime();
        }
        if ("bumpedAt" in data && typeof data.bumpedAt !== "undefined") {
            this._bumpedAt = data.bumpedAt ? (0, util_1.parseToStamp)(data.bumpedAt) : null;
        }
        if ("isPinned" in data && typeof data.isPinned !== "undefined") {
            this.isPinned = data.isPinned;
        }
        if ("isLocked" in data && typeof data.isLocked !== "undefined") {
            this.isLocked = data.isLocked;
        }
        if ("title" in data && typeof data.title !== "undefined") {
            this.title = data.title;
        }
        if ("content" in data && typeof data.content !== "undefined") {
            this.content = data.content;
        }
        if ("mentions" in data && typeof data.mentions !== "undefined") {
            this.mentions = data.mentions;
        }
        return this;
    }
}
exports.ForumTopic = ForumTopic;
/** A partial summary representation of a forum topic. Can fetch this topic to get full data */
class PartialForumTopic extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.serverId = data.serverId;
        this.channelId = data.channelId;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.createdBy = data.createdBy;
        this.isPinned = false;
        this._update(data);
    }
    _update(data) {
        if ("updatedAt" in data && typeof data.updatedAt !== "undefined") {
            this._updatedAt = data.updatedAt ? (0, util_1.parseToStamp)(data.updatedAt) : null;
        }
        if ("bumpedAt" in data && typeof data.bumpedAt !== "undefined") {
            this._bumpedAt = data.bumpedAt ? (0, util_1.parseToStamp)(data.bumpedAt) : null;
        }
        if ("isPinned" in data && typeof data.isPinned !== "undefined") {
            this.isPinned = data.isPinned;
        }
        if ("title" in data && typeof data.title !== "undefined") {
            this.title = data.title;
        }
        return this;
    }
    /**
     * Gets the creation date of the forum topic.
     *
     * @returns A Date object
     */
    get createdAt() {
        return new Date(this._createdAt);
    }
    /**
     * Gets the date the forum topic was last updated, or null if it hasn't been updated.
     *
     * @returns A Date object
     */
    get updatedAt() {
        return this._updatedAt ? new Date(this._updatedAt) : null;
    }
    /**
     * Fetch the full member object of this partial member
     *
     * @returns A promise containing the resolved full member.
     */
    fetch() {
        return this.client.topics.fetch(this.serverId, this.id);
    }
}
exports.PartialForumTopic = PartialForumTopic;
//# sourceMappingURL=Forum.js.map