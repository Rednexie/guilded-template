"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListChannel = void 0;
const collection_1 = require("@discordjs/collection");
const Channel_1 = require("./Channel");
/**
 * Represents a list channel in Guilded.
 *
 * @extends Channel
 */
class ListChannel extends Channel_1.Channel {
    constructor() {
        super(...arguments);
        /**
         * The list items in this channel.
         */
        this.items = new collection_1.Collection();
    }
    /**
     * Creates a list item in this channel.
     *
     * @param message - The message of the new list item.
     * @param note - Optional note for the new list item.
     * @returns A Promise that resolves with the newly created list item payload.
     */
    createItem(message, note) {
        return this.client.lists.create(this.id, {
            message,
            note: note ? { content: note } : undefined,
        });
    }
    /**
     * Fetches a list item by its ID.
     *
     * @param itemId - The ID of the list item to fetch.
     * @returns A Promise that resolves with the list item payload.
     */
    getItem(itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.lists.fetch(this.id, itemId);
            this.items.set(data.id, data);
            return data;
        });
    }
    /**
     * Fetches all list items in this channel.
     *
     * @returns A Promise that resolves with an array of list item summary payloads.
     */
    getItems() {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.lists.fetchMany(this.id);
            for (const item of data) {
                this.items.set(item.id, item);
            }
            return data;
        });
    }
    /**
     * Completes a list item.
     *
     * @param itemId - The ID of the list item to complete.
     * @returns A Promise that resolves when the list item is completed.
     */
    completeItem(itemId) {
        return this.client.lists.complete(this.id, itemId);
    }
    /**
     * Uncompletes a list item.
     *
     * @param itemId - The ID of the list item to uncomplete.
     * @returns A Promise that resolves when the list item is uncompleted.
     */
    uncompleteItem(itemId) {
        return this.client.lists.uncomplete(this.id, itemId);
    }
}
exports.ListChannel = ListChannel;
//# sourceMappingURL=ListChannel.js.map