"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.channelTypeToEnumMap = exports.ChannelType = exports.Channel = void 0;
const util_1 = require("../../util");
const Base_1 = require("../Base");
/**
 * Represents a channel in a server on Guilded.
 */
class Channel extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.serverId = data.serverId;
        this.type = exports.channelTypeToEnumMap[data.type];
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.createdBy = data.createdBy;
        this.groupId = data.groupId;
        this._update(data);
    }
    /**
     * The timestamp when the channel was created as a Date object.
     */
    get createdAt() {
        return new Date(this._createdAt);
    }
    /**
     * The timestamp when the channel was archived as a Date object, or null if the channel is not archived.
     */
    get archivedAt() {
        return this._archivedAt ? new Date(this._archivedAt) : null;
    }
    /**
     * The timestamp when the channel was last updated as a Date object, or null if the channel has not been updated.
     */
    get updatedAt() {
        return this._updatedAt ? new Date(this._updatedAt) : null;
    }
    _update(data) {
        var _a, _b, _c, _d, _e;
        if ("name" in data && typeof data.name !== "undefined") {
            this.name = data.name;
        }
        if ("topic" in data) {
            this.topic = (_a = data.topic) !== null && _a !== void 0 ? _a : null;
        }
        if ("updatedAt" in data && typeof data.updatedAt !== "undefined") {
            this._updatedAt = data.updatedAt ? (0, util_1.parseToStamp)(data.updatedAt) : null;
        }
        if ("parentId" in data && typeof data.updatedAt !== "undefined") {
            this.parentId = (_b = data.parentId) !== null && _b !== void 0 ? _b : null;
        }
        if ("categoryId" in data && typeof data.categoryId !== "undefined") {
            this.categoryId = (_c = data.categoryId) !== null && _c !== void 0 ? _c : null;
        }
        if ("isPublic" in data && typeof data.isPublic !== "undefined") {
            this.isPublic = (_d = data.isPublic) !== null && _d !== void 0 ? _d : false;
        }
        if ("archivedBy" in data && typeof data.archivedBy !== "undefined") {
            this.archivedBy = (_e = data.archivedBy) !== null && _e !== void 0 ? _e : null;
        }
        if ("archivedAt" in data && typeof data.archivedAt !== "undefined") {
            this._archivedAt = data.archivedAt ? (0, util_1.parseToStamp)(data.archivedAt) : null;
        }
        return this;
    }
    /**
     * Fetch from the latest 100 messages in the channel.
     *
     * @param options - Additional options for the message fetch.
     */
    fetchMessages(options) {
        return this.client.messages.fetchMany(this.id, options !== null && options !== void 0 ? options : {});
    }
    /**
     * Fetch details for a specific message in the channel.
     *
     * @param messageId - The ID of the message to fetch.
     */
    fetchMessage(messageId) {
        return this.client.messages.fetch(this.id, messageId);
    }
    /**
     * Update the channel with new data.
     *
     * @param options - The new data for the channel.
     */
    update(options) {
        return this.client.channels.update(this.id, options);
    }
    /**
     * Delete the channel.
     */
    delete() {
        return this.client.channels.delete(this.id);
    }
    /**
     * Send a message in the channel.
     *
     * @param content - The content of the message.
     * @example
     * let replyObj = {
     *  content: 'This is text, supports **markdown**.',
     *  embeds: [{
     *    title: 'This is an embed title!',
     *    description: 'A description may go here'
     *  }]
     * };
     * channel.send(replyObj)
     */
    send(content) {
        return this.client.messages.send(this.id, content);
    }
}
exports.Channel = Channel;
/**
 * Enum for mapping channel types to an int for memory saving.
 */
var ChannelType;
(function (ChannelType) {
    ChannelType[ChannelType["Announcements"] = 0] = "Announcements";
    ChannelType[ChannelType["Chat"] = 1] = "Chat";
    ChannelType[ChannelType["Calendar"] = 2] = "Calendar";
    ChannelType[ChannelType["Forums"] = 3] = "Forums";
    ChannelType[ChannelType["Media"] = 4] = "Media";
    ChannelType[ChannelType["Docs"] = 5] = "Docs";
    ChannelType[ChannelType["Voice"] = 6] = "Voice";
    ChannelType[ChannelType["List"] = 7] = "List";
    ChannelType[ChannelType["Scheduling"] = 8] = "Scheduling";
    ChannelType[ChannelType["Stream"] = 9] = "Stream";
})(ChannelType = exports.ChannelType || (exports.ChannelType = {}));
/**
 * A map of API channel types to channel types.
 */
exports.channelTypeToEnumMap = {
    announcements: ChannelType.Announcements,
    chat: ChannelType.Chat,
    calendar: ChannelType.Calendar,
    forums: ChannelType.Forums,
    media: ChannelType.Media,
    docs: ChannelType.Docs,
    voice: ChannelType.Voice,
    list: ChannelType.List,
    scheduling: ChannelType.Scheduling,
    stream: ChannelType.Stream,
};
//# sourceMappingURL=Channel.js.map