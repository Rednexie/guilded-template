"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerTypeMap = exports.ServerType = exports.Server = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * A class representing a Guilded server.
 */
class Server extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.ownerId = data.ownerId;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this._update(data);
    }
    /** The date when the server was created. */
    get createdAt() {
        return new Date(this._createdAt);
    }
    /** The URL of the server. */
    get url() {
        return `https://www.guilded.gg/${this.shortURL}`;
    }
    /** The owner of the server. */
    get owner() {
        var _a;
        return (_a = this.client.members.cache.get((0, util_1.buildMemberKey)(this.id, this.ownerId))) !== null && _a !== void 0 ? _a : null;
    }
    /** The default channel of the server. */
    get defaultChannel() {
        var _a;
        return this.defaultChannelId ? (_a = this.client.channels.cache.get(this.defaultChannelId)) !== null && _a !== void 0 ? _a : null : null;
    }
    _update(data) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if ("name" in data && typeof data.name !== "undefined") {
            this.name = data.name;
        }
        if ("type" in data && typeof data.type !== "undefined") {
            this.type = (_a = exports.ServerTypeMap[data.type]) !== null && _a !== void 0 ? _a : null;
        }
        if ("url" in data && typeof data.url !== "undefined") {
            this.shortURL = (_b = data.url) !== null && _b !== void 0 ? _b : null;
        }
        if ("about" in data && typeof data.about !== "undefined") {
            this.description = (_c = data.about) !== null && _c !== void 0 ? _c : null;
        }
        if ("avatar" in data && typeof data.avatar !== "undefined") {
            this.iconURL = (_d = data.avatar) !== null && _d !== void 0 ? _d : null;
        }
        if ("bannerURL" in data && typeof data.banner !== "undefined") {
            this.bannerURL = (_e = data.banner) !== null && _e !== void 0 ? _e : null;
        }
        if ("timezone" in data && typeof data.timezone !== "undefined") {
            this.timezone = (_f = data.timezone) !== null && _f !== void 0 ? _f : null;
        }
        if ("isVerified" in data && typeof data.isVerified !== "undefined") {
            this.isVerified = (_g = data.isVerified) !== null && _g !== void 0 ? _g : false;
        }
        if ("defaultChannelId" in data && typeof data.defaultChannelId !== "undefined") {
            this.defaultChannelId = (_h = data.defaultChannelId) !== null && _h !== void 0 ? _h : null;
        }
        return this;
    }
}
exports.Server = Server;
/** The type of a Guilded server. */
var ServerType;
(function (ServerType) {
    ServerType[ServerType["Team"] = 0] = "Team";
    ServerType[ServerType["Organization"] = 1] = "Organization";
    ServerType[ServerType["Community"] = 2] = "Community";
    ServerType[ServerType["Clan"] = 3] = "Clan";
    ServerType[ServerType["Guild"] = 4] = "Guild";
    ServerType[ServerType["Friends"] = 5] = "Friends";
    ServerType[ServerType["Streaming"] = 6] = "Streaming";
    ServerType[ServerType["Other"] = 7] = "Other";
})(ServerType = exports.ServerType || (exports.ServerType = {}));
/** A mapping of server types from the API to the client. */
exports.ServerTypeMap = {
    team: ServerType.Team,
    organization: ServerType.Organization,
    community: ServerType.Community,
    clan: ServerType.Clan,
    guild: ServerType.Guild,
    friends: ServerType.Friends,
    streaming: ServerType.Streaming,
    other: ServerType.Other,
};
//# sourceMappingURL=Server.js.map