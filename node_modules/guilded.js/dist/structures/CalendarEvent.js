"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventRsvp = exports.CalendarEvent = void 0;
const collection_1 = require("@discordjs/collection");
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * Represents a calendar event on Guilded
 */
class CalendarEvent extends Base_1.Base {
    constructor(client, data) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        super(client, data);
        this.id = data.id;
        this.serverId = data.serverId;
        this.channelId = data.channelId;
        this.name = data.name;
        this.description = (_a = data.description) !== null && _a !== void 0 ? _a : null;
        this.location = (_b = data.location) !== null && _b !== void 0 ? _b : null;
        this.url = (_c = data.url) !== null && _c !== void 0 ? _c : null;
        this.color = (_d = data.color) !== null && _d !== void 0 ? _d : null;
        this.startsAt = data.startsAt;
        this.duration = (_e = data.duration) !== null && _e !== void 0 ? _e : null;
        this.isPrivate = (_f = data.isPrivate) !== null && _f !== void 0 ? _f : false;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.createdBy = data.createdBy;
        this.rsvpLimit = (_g = data.rsvpLimit) !== null && _g !== void 0 ? _g : null;
        this.rsvps = new collection_1.Collection();
        this.roleIds = (_h = data.roleIds) !== null && _h !== void 0 ? _h : null;
        this.seriesId = (_j = data.seriesId) !== null && _j !== void 0 ? _j : null;
        this.repeats = (_k = data.repeats) !== null && _k !== void 0 ? _k : null;
        this.isAllDay = (_l = data.isAllDay) !== null && _l !== void 0 ? _l : null;
        this.autofillWaitlist = (_m = data.autofillWaitlist) !== null && _m !== void 0 ? _m : null;
        this._update(data);
    }
    /**
     * Get the author of this calendar event
     *
     * @returns The author of this calendar event or null if the author is not cached
     */
    get author() {
        var _a;
        return (_a = this.client.users.cache.get(this.createdBy)) !== null && _a !== void 0 ? _a : null;
    }
    /**
     * Get the date this calendar event was created
     *
     * @returns The date this calendar event was created
     */
    get createdAt() {
        return new Date(this._createdAt);
    }
    _update(data) {
        var _a;
        if ("name" in data && typeof data.name !== "undefined") {
            this.name = data.name;
        }
        if ("description" in data && typeof data.description !== "undefined") {
            this.description = data.description;
        }
        if ("url" in data && typeof data.url !== "undefined") {
            this.url = data.url;
        }
        if ("color" in data && typeof data.color !== "undefined") {
            this.color = data.color;
        }
        if ("startsAt" in data && typeof data.startsAt !== "undefined") {
            this.startsAt = data.startsAt;
        }
        if ("duration" in data && typeof data.duration !== "undefined") {
            this.duration = data.duration;
        }
        if ("isPrivate" in data && typeof data.isPrivate !== "undefined") {
            this.isPrivate = data.isPrivate;
        }
        if ("mentions" in data && typeof data.mentions !== "undefined") {
            this.mentions = data.mentions;
        }
        if ("cancellation" in data && typeof data.cancellation !== "undefined") {
            this.cancellation = data.cancellation;
        }
        if ("rsvpLimit" in data && typeof data.rsvpLimit !== "undefined") {
            this.rsvpLimit = (_a = data.rsvpLimit) !== null && _a !== void 0 ? _a : null;
        }
        return this;
    }
}
exports.CalendarEvent = CalendarEvent;
/**
 * Represents a calendar event RSVP
 */
class CalendarEventRsvp extends Base_1.Base {
    constructor(client, data) {
        super(client, Object.assign(Object.assign({}, data), { id: data.calendarEventId.toString() + "-" + data.userId }));
        this.calendarEventId = data.calendarEventId;
        this.channelId = data.channelId;
        this.serverId = data.serverId;
        this.userId = data.userId;
        this.status = data.status;
        this.createdBy = data.createdBy;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.updatedBy = null;
        this.updatedAt = null;
        this._update(data);
    }
    get author() {
        var _a;
        return (_a = this.client.users.cache.get(this.createdBy)) !== null && _a !== void 0 ? _a : null;
    }
    get createdAt() {
        return new Date(this._createdAt);
    }
    _update(data) {
        var _a, _b;
        if ("updatedAt" in data && typeof data.updatedAt !== "undefined") {
            this.updatedAt = (_a = data.updatedAt) !== null && _a !== void 0 ? _a : null;
        }
        if ("updatedBy" in data && typeof data.updatedBy !== "undefined") {
            this.updatedBy = (_b = data.updatedBy) !== null && _b !== void 0 ? _b : null;
        }
        if ("status" in data && typeof data.status !== "undefined") {
            this.status = data.status;
        }
        return this;
    }
}
exports.CalendarEventRsvp = CalendarEventRsvp;
//# sourceMappingURL=CalendarEvent.js.map