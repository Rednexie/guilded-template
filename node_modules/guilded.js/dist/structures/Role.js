"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Role = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
/**
 * Represents a Guilded role in a server
 */
class Role extends Base_1.Base {
    /**
     * @param client - The client instance
     * @param data - The data for this role
     */
    constructor(client, data) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(client, data);
        this.serverId = data.serverId;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this._updatedAt = null;
        this.name = data.name;
        this.isDisplayedSeparately = (_a = data.isDisplayedSeparately) !== null && _a !== void 0 ? _a : false;
        this.isSelfAssignable = (_b = data.isSelfAssignable) !== null && _b !== void 0 ? _b : false;
        this.isMentionable = (_c = data.isMentionable) !== null && _c !== void 0 ? _c : false;
        this.permissions = data.permissions;
        this.colors = (_d = data.colors) !== null && _d !== void 0 ? _d : [];
        this.icon = (_e = data.icon) !== null && _e !== void 0 ? _e : null;
        this.position = data.position;
        this.isBase = (_f = data.isBase) !== null && _f !== void 0 ? _f : false;
        this.botUserId = (_g = data.botUserId) !== null && _g !== void 0 ? _g : null;
    }
    _update(data) {
        if ("updatedAt" in data) {
            this._updatedAt = data.updatedAt ? (0, util_1.parseToStamp)(data.updatedAt) : null;
        }
        return this;
    }
    get createdAt() {
        return new Date(this._createdAt);
    }
    /**
     * Returns the date and time the message was last updated, if relevant.
     */
    get updatedAt() {
        return this._updatedAt ? new Date(this._updatedAt) : null;
    }
    /**
     * Award XP to a role
     *
     * @param amount - The amount of XP to award to the role
     * @returns A Promise that resolves to the new total XP of the role
     */
    giveXP(amount) {
        return this.client.roles.giveXP(this.serverId, this.id, amount);
    }
    /**
     * Assign role to member
     *
     * @param memberId - The ID of the member to assign the role to
     * @returns A Promise that resolves when the role has been assigned to the member
     */
    assignToMember(memberId) {
        return this.client.roles.addRoleToMember(this.serverId, memberId, this.id);
    }
    /**
     * Remove role from member
     *
     * @param memberId - The ID of the member to remove the role from
     * @returns A Promise that resolves when the role has been removed from the member
     */
    removeFromMember(memberId) {
        return this.client.roles.removeRoleFromMember(this.serverId, memberId, this.id);
    }
}
exports.Role = Role;
//# sourceMappingURL=Role.js.map