"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = void 0;
const util_1 = require("../util");
const Base_1 = require("./Base");
class Category extends Base_1.Base {
    constructor(client, data) {
        super(client, data);
        this.serverId = data.serverId;
        this._createdAt = (0, util_1.parseToStamp)(data.createdAt);
        this.groupId = data.groupId;
        this._update(data);
    }
    _update(data) {
        if (typeof data.name !== "undefined")
            this.name = data.name;
        if (typeof data.updatedAt !== "undefined")
            this._updatedAt = (0, util_1.parseToStamp)(data.updatedAt);
        return this;
    }
    /**
     * Gets the creation date of this category.
     *
     * @returns The creation date of this category.
     */
    get createdAt() {
        return new Date(this._createdAt);
    }
    /**
     * Gets the last time this category was updated.
     *
     * @returns The last time this category was updated.
     */
    get updatedAt() {
        return this._updatedAt ? new Date(this._updatedAt) : null;
    }
    /**
     * Updates this webhook with new options
     *
     * @param options The new options for this webhook
     * @returns A promise that resolves with the updated webhook
     */
    update(options) {
        return this.client.categories.update(this.serverId, this.id, options);
    }
    /**
     * Delete this category.
     *
     * @returns A Promise that resolves with the updated category.
     */
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.categories.delete(this.serverId, this.id);
        });
    }
}
exports.Category = Category;
//# sourceMappingURL=Category.js.map