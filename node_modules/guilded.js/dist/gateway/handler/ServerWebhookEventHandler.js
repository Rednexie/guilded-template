"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerWebhookEventHandler = void 0;
const constants_1 = require("../../constants");
const Webhook_1 = require("../../structures/Webhook");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class ServerWebhookEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    serverWebhookCreated(data) {
        const existingWebhook = this.client.webhooks.cache.get(data.d.webhook.id);
        if (existingWebhook)
            return this.client.emit(constants_1.constants.clientEvents.WEBHOOK_CREATED, existingWebhook);
        const newWebhook = new Webhook_1.Webhook(this.client, data.d.webhook);
        this.client.webhooks.cache.set(newWebhook.id, newWebhook);
        return this.client.emit(constants_1.constants.clientEvents.WEBHOOK_CREATED, newWebhook);
    }
    serverWebhookUpdated(data) {
        const getCachedWebhook = this.client.webhooks.cache.get(data.d.webhook.id);
        if (!getCachedWebhook) {
            const newWebhook = new Webhook_1.Webhook(this.client, data.d.webhook);
            return this.client.emit(constants_1.constants.clientEvents.WEBHOOK_UPDATED, newWebhook, null);
        }
        const frozenOldWebhook = Object.freeze(getCachedWebhook._clone());
        getCachedWebhook._update(data.d.webhook);
        return this.client.emit(constants_1.constants.clientEvents.WEBHOOK_UPDATED, getCachedWebhook, frozenOldWebhook);
    }
}
exports.ServerWebhookEventHandler = ServerWebhookEventHandler;
//# sourceMappingURL=ServerWebhookEventHandler.js.map