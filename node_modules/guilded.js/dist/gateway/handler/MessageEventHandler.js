"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageEventHandler = void 0;
const constants_1 = require("../../constants");
const Message_1 = require("../../structures/Message");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class MessageEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    messageCreated(data) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // This is in the case that a REST request beats us to adding the message in the cache.
            const existingMessage = this.client.messages.cache.get(data.d.message.id);
            if (existingMessage)
                return this.client.emit(constants_1.constants.clientEvents.MESSAGE_CREATED, existingMessage);
            if (((_b = (_a = this.client.options.cache) === null || _a === void 0 ? void 0 : _a.fetchMessageAuthorOnCreate) !== null && _b !== void 0 ? _b : true) && data.d.serverId && data.d.message.createdBy && data.d.message.createdBy !== "Ann6LewA")
                yield this.client.members.fetch(data.d.serverId, data.d.message.createdBy).catch(() => null);
            const newMessage = new Message_1.Message(this.client, data.d.message);
            if (this.client.messages.shouldCacheMessage)
                this.client.messages.cache.set(newMessage.id, newMessage);
            return this.client.emit(constants_1.constants.clientEvents.MESSAGE_CREATED, newMessage);
        });
    }
    messageUpdated(data) {
        const getCachedMessage = this.client.messages.cache.get(data.d.message.id);
        if (!getCachedMessage) {
            const newMessage = new Message_1.Message(this.client, data.d.message);
            return this.client.emit(constants_1.constants.clientEvents.MESSAGE_UPDATED, newMessage, null);
        }
        const frozenOldMessage = Object.freeze(getCachedMessage._clone());
        getCachedMessage._update(data.d.message);
        return this.client.emit(constants_1.constants.clientEvents.MESSAGE_UPDATED, getCachedMessage, frozenOldMessage);
    }
    messageDeleted(data) {
        var _a;
        (_a = this.client.messages.cache.get(data.d.message.id)) === null || _a === void 0 ? void 0 : _a._update({ deletedAt: data.d.message.deletedAt });
        return this.client.emit(constants_1.constants.clientEvents.MESSAGE_DELETED, Object.assign(Object.assign({}, data.d.message), { serverId: data.d.serverId }));
    }
}
exports.MessageEventHandler = MessageEventHandler;
//# sourceMappingURL=MessageEventHandler.js.map