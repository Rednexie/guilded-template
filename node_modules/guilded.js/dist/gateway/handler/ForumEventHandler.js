"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumEventHandler = void 0;
const constants_1 = require("../../constants");
const Forum_1 = require("../../structures/Forum");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class ForumEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    forumTopicCreated(data) {
        // This is in the case that a REST request beats us to adding the topic in the cache.
        const existingTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        if (existingTopic)
            return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_CREATED, existingTopic);
        const newTopic = new Forum_1.ForumTopic(this.client, data.d.forumTopic);
        if (this.client.topics.shouldCacheForumTopic)
            this.client.topics.cache.set(newTopic.id, newTopic);
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_CREATED, newTopic);
    }
    forumTopicUpdated(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        if (!getCachedTopic) {
            const newTopic = new Forum_1.ForumTopic(this.client, data.d.forumTopic);
            return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_UPDATED, newTopic, null);
        }
        const frozenOldTopic = Object.freeze(getCachedTopic._clone());
        getCachedTopic._update(data.d.forumTopic);
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_UPDATED, getCachedTopic, frozenOldTopic);
    }
    forumTopicDeleted(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        getCachedTopic === null || getCachedTopic === void 0 ? void 0 : getCachedTopic._update({ _deletedAt: new Date() });
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_DELETED, getCachedTopic !== null && getCachedTopic !== void 0 ? getCachedTopic : new Forum_1.ForumTopic(this.client, data.d.forumTopic));
    }
    forumTopicPinned(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        getCachedTopic === null || getCachedTopic === void 0 ? void 0 : getCachedTopic._update({ isPinned: true });
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_PINNED, getCachedTopic !== null && getCachedTopic !== void 0 ? getCachedTopic : new Forum_1.ForumTopic(this.client, data.d.forumTopic));
    }
    forumTopicUnpinned(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        getCachedTopic === null || getCachedTopic === void 0 ? void 0 : getCachedTopic._update({ isPinned: false });
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_UNPINNED, getCachedTopic !== null && getCachedTopic !== void 0 ? getCachedTopic : new Forum_1.ForumTopic(this.client, data.d.forumTopic));
    }
    forumTopicLocked(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        getCachedTopic === null || getCachedTopic === void 0 ? void 0 : getCachedTopic._update({ isLocked: true });
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_LOCKED, getCachedTopic !== null && getCachedTopic !== void 0 ? getCachedTopic : new Forum_1.ForumTopic(this.client, data.d.forumTopic));
    }
    forumTopicUnlocked(data) {
        const getCachedTopic = this.client.topics.cache.get(data.d.forumTopic.id);
        getCachedTopic === null || getCachedTopic === void 0 ? void 0 : getCachedTopic._update({ isLocked: false });
        return this.client.emit(constants_1.constants.clientEvents.FORUM_TOPIC_UNLOCKED, getCachedTopic !== null && getCachedTopic !== void 0 ? getCachedTopic : new Forum_1.ForumTopic(this.client, data.d.forumTopic));
    }
}
exports.ForumEventHandler = ForumEventHandler;
//# sourceMappingURL=ForumEventHandler.js.map