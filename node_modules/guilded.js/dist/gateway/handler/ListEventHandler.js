"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListEventHandler = void 0;
const constants_1 = require("../../constants");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class ListEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    listItemCompleted(data) {
        const existingChannel = this.client.channels.cache.get(data.d.listItem.channelId);
        if (existingChannel)
            existingChannel.items.set(data.d.listItem.id, data.d.listItem);
        return this.client.emit(constants_1.constants.clientEvents.LIST_ITEM_COMPLETED, data.d.listItem);
    }
    listItemUncompleted(data) {
        const existingChannel = this.client.channels.cache.get(data.d.listItem.channelId);
        if (existingChannel)
            existingChannel.items.set(data.d.listItem.id, data.d.listItem);
        return this.client.emit(constants_1.constants.clientEvents.LIST_ITEM_UNCOMPLETED, data.d.listItem);
    }
    listItemCreated(data) {
        const existingChannel = this.client.channels.cache.get(data.d.listItem.channelId);
        if (existingChannel)
            existingChannel.items.set(data.d.listItem.id, data.d.listItem);
        return this.client.emit(constants_1.constants.clientEvents.LIST_ITEM_CREATED, data.d.listItem);
    }
    listItemUpdated(data) {
        const existingChannel = this.client.channels.cache.get(data.d.listItem.channelId);
        const existingItem = existingChannel === null || existingChannel === void 0 ? void 0 : existingChannel.items.get(data.d.listItem.id);
        if (existingChannel)
            existingChannel.items.set(data.d.listItem.id, data.d.listItem);
        return this.client.emit(constants_1.constants.clientEvents.LIST_ITEM_UPDATED, data.d.listItem, existingItem !== null && existingItem !== void 0 ? existingItem : null);
    }
    listItemDeleted(data) {
        const existingChannel = this.client.channels.cache.get(data.d.listItem.channelId);
        if (existingChannel)
            existingChannel.items.set(data.d.listItem.id, data.d.listItem);
        return this.client.emit(constants_1.constants.clientEvents.LIST_ITEM_DELETED, data.d.listItem);
    }
}
exports.ListEventHandler = ListEventHandler;
//# sourceMappingURL=ListEventHandler.js.map