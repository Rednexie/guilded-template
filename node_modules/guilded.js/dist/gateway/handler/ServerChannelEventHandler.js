"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerChannelEventHandler = void 0;
const constants_1 = require("../../constants");
const ChannelManager_1 = require("../../managers/global/ChannelManager");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class ServerChannelEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    serverChannelCreated(data) {
        const existingChannel = this.client.channels.cache.get(data.d.channel.id);
        if (existingChannel)
            return this.client.emit(constants_1.constants.clientEvents.CHANNEL_CREATED, existingChannel);
        const newChannel = new ((0, ChannelManager_1.transformTypeToChannel)(data.d.channel.type))(this.client, data.d.channel);
        if (this.client.channels.shouldCacheChannel)
            this.client.channels.cache.set(newChannel.id, newChannel);
        return this.client.emit(constants_1.constants.clientEvents.CHANNEL_CREATED, newChannel);
    }
    serverChannelUpdated(data) {
        var _a;
        const existingChannel = this.client.channels.cache.get(data.d.channel.id);
        const oldChannel = existingChannel === null || existingChannel === void 0 ? void 0 : existingChannel._clone();
        const updatedChannel = (_a = existingChannel === null || existingChannel === void 0 ? void 0 : existingChannel._update(data.d.channel)) !== null && _a !== void 0 ? _a : new ((0, ChannelManager_1.transformTypeToChannel)(data.d.channel.type))(this.client, data.d.channel);
        return this.client.emit(constants_1.constants.clientEvents.CHANNEL_UPDATED, updatedChannel, oldChannel !== null && oldChannel !== void 0 ? oldChannel : null);
    }
    serverChannelDeleted(data) {
        var _a, _b;
        const existingChannel = this.client.channels.cache.get(data.d.channel.id);
        const deletedChannel = (_a = existingChannel === null || existingChannel === void 0 ? void 0 : existingChannel._update(Object.assign(Object.assign({}, data.d.channel), { deleted: true }))) !== null && _a !== void 0 ? _a : new ((0, ChannelManager_1.transformTypeToChannel)(data.d.channel.type))(this.client, data.d.channel);
        if ((_b = this.client.options.cache) === null || _b === void 0 ? void 0 : _b.removeChannelOnDelete)
            this.client.channels.cache.delete(deletedChannel.id);
        return this.client.emit(constants_1.constants.clientEvents.CHANNEL_DELETED, deletedChannel);
    }
}
exports.ServerChannelEventHandler = ServerChannelEventHandler;
//# sourceMappingURL=ServerChannelEventHandler.js.map