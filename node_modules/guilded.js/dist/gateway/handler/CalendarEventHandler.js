"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventRsvpHandler = exports.CalendarEventHandler = void 0;
const collection_1 = require("@discordjs/collection");
const constants_1 = require("../../constants");
const CalendarEvent_1 = require("../../structures/CalendarEvent");
const GatewayEventHandler_1 = require("./GatewayEventHandler");
class CalendarEventHandler extends GatewayEventHandler_1.GatewayEventHandler {
    calendarEventCreated(data) {
        const existingCalendar = this.client.calendars.cache.get(data.d.calendarEvent.id);
        if (existingCalendar)
            return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_CREATED, existingCalendar);
        const newCalendarEvent = new CalendarEvent_1.CalendarEvent(this.client, data.d.calendarEvent);
        if (this.client.calendars.shouldCacheCalendar)
            this.client.calendars.cache.set(newCalendarEvent.id, newCalendarEvent);
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_CREATED, newCalendarEvent);
    }
    calendarEventUpdated(data) {
        var _a;
        const existingCalendar = this.client.calendars.cache.get(data.d.calendarEvent.id);
        const oldCalendar = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar._clone();
        const updatedCalendar = (_a = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar._update(data.d.calendarEvent)) !== null && _a !== void 0 ? _a : new CalendarEvent_1.CalendarEvent(this.client, data.d.calendarEvent);
        if (this.client.calendars.shouldCacheCalendar && !existingCalendar)
            this.client.calendars.cache.set(updatedCalendar.id, updatedCalendar);
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_UPDATED, updatedCalendar, oldCalendar !== null && oldCalendar !== void 0 ? oldCalendar : null);
    }
    calendarEventDeleted(data) {
        var _a, _b;
        const existingCalendar = this.client.calendars.cache.get(data.d.calendarEvent.id);
        const deletedCalendar = (_a = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar._update(data.d.calendarEvent)) !== null && _a !== void 0 ? _a : new CalendarEvent_1.CalendarEvent(this.client, data.d.calendarEvent);
        if ((_b = this.client.options.cache) === null || _b === void 0 ? void 0 : _b.removeCalendarsOnDelete)
            this.client.calendars.cache.delete(deletedCalendar.id);
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_DELETED, deletedCalendar);
    }
}
exports.CalendarEventHandler = CalendarEventHandler;
class CalendarEventRsvpHandler extends GatewayEventHandler_1.GatewayEventHandler {
    calendarEventRsvpUpdated(data) {
        var _a, _b, _c;
        const existingCalendar = this.client.calendars.cache.get(data.d.calendarEventRsvp.calendarEventId);
        const existingCalendarRsvp = (_a = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar.rsvps) === null || _a === void 0 ? void 0 : _a.get(data.d.calendarEventRsvp.userId);
        const oldCalendarRsvp = existingCalendarRsvp === null || existingCalendarRsvp === void 0 ? void 0 : existingCalendarRsvp._clone();
        const updatedCalendarRsvp = (_b = existingCalendarRsvp === null || existingCalendarRsvp === void 0 ? void 0 : existingCalendarRsvp._update(data.d.calendarEventRsvp)) !== null && _b !== void 0 ? _b : new CalendarEvent_1.CalendarEventRsvp(this.client, data.d.calendarEventRsvp);
        if (this.client.calendars.shouldCacheCalendar && this.client.calendars.shouldCacheCalendarRsvps && !existingCalendarRsvp)
            (_c = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar.rsvps) === null || _c === void 0 ? void 0 : _c.set(updatedCalendarRsvp.userId, updatedCalendarRsvp);
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_RSVP_UPDATED, updatedCalendarRsvp, oldCalendarRsvp !== null && oldCalendarRsvp !== void 0 ? oldCalendarRsvp : null);
    }
    calendarEventRsvpManyUpdated(data) {
        var _a, _b, _c;
        const rsvpCollection = new collection_1.Collection();
        for (const rsvp of data.d.calendarEventRsvps) {
            const existingCalendar = this.client.calendars.cache.get(rsvp.calendarEventId);
            const existingCalendarRsvp = (_a = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar.rsvps) === null || _a === void 0 ? void 0 : _a.get(rsvp.userId);
            const newCalendarRsvp = (_b = existingCalendarRsvp === null || existingCalendarRsvp === void 0 ? void 0 : existingCalendarRsvp._update(rsvp)) !== null && _b !== void 0 ? _b : new CalendarEvent_1.CalendarEventRsvp(this.client, rsvp);
            rsvpCollection.set(rsvp.userId, newCalendarRsvp);
            if (this.client.calendars.shouldCacheCalendar && this.client.calendars.shouldCacheCalendarRsvps && !existingCalendarRsvp) {
                (_c = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar.rsvps) === null || _c === void 0 ? void 0 : _c.set(rsvp.userId, newCalendarRsvp);
            }
        }
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_RSVP_MANY_UPDATED, rsvpCollection);
    }
    calendarEventRsvpDeleted(data) {
        var _a, _b, _c, _d;
        const existingCalendar = this.client.calendars.cache.get(data.d.calendarEventRsvp.calendarEventId);
        const existingCalendarRsvp = (_a = existingCalendar === null || existingCalendar === void 0 ? void 0 : existingCalendar.rsvps) === null || _a === void 0 ? void 0 : _a.get(data.d.calendarEventRsvp.userId);
        const deletedCalendarRsvp = (_b = existingCalendarRsvp === null || existingCalendarRsvp === void 0 ? void 0 : existingCalendarRsvp._update(data.d.calendarEventRsvp)) !== null && _b !== void 0 ? _b : new CalendarEvent_1.CalendarEventRsvp(this.client, data.d.calendarEventRsvp);
        if ((_c = this.client.options.cache) === null || _c === void 0 ? void 0 : _c.removeCalendarRsvpOnDelete) {
            const currentCalendar = this.client.calendars.cache.get(data.d.calendarEventRsvp.calendarEventId);
            (_d = currentCalendar === null || currentCalendar === void 0 ? void 0 : currentCalendar.rsvps) === null || _d === void 0 ? void 0 : _d.delete(data.d.calendarEventRsvp.userId);
        }
        return this.client.emit(constants_1.constants.clientEvents.CALENDAR_EVENT_RSVP_DELETED, deletedCalendarRsvp);
    }
}
exports.CalendarEventRsvpHandler = CalendarEventRsvpHandler;
//# sourceMappingURL=CalendarEventHandler.js.map