"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalDocManager = void 0;
const GlobalManager_1 = require("./GlobalManager");
/**
 * A manager class for Docs
 */
class GlobalDocManager extends GlobalManager_1.GlobalManager {
    /**
     * Create a new Doc.
     *
     * @param channelId - The ID of the channel where the Doc should be created.
     * @param options - The options for the Doc to be created.
     * @returns A Promise that resolves with the Doc payload of the newly created Doc.
     */
    create(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.docs.docCreate({
                channelId,
                requestBody: options,
            });
            return data.doc;
        });
    }
    /**
     * Fetches multiple Docs from a channel.
     *
     * @param channelId - The ID of the channel where the Docs are located.
     * @returns A Promise that resolves with an array of Doc payloads.
     */
    fetchMany(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.docs.docReadMany({ channelId });
            return data.docs;
        });
    }
    /**
     * Fetch a Doc from a channel.
     *
     * @param channelId - The ID of the channel where the Doc is located.
     * @param docId - The ID of the Doc to fetch.
     * @returns A Promise that resolves with the Doc payload of the fetched Doc.
     */
    fetch(channelId, docId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.docs.docRead({
                channelId,
                docId,
            });
            return data.doc;
        });
    }
    /**
     * Update a Doc.
     *
     * @param channelId - The ID of the channel where the Doc is located.
     * @param docId - The ID of the Doc to update.
     * @param options - The options for the Doc update.
     * @returns A Promise that resolves with the Doc payload of the updated Doc.
     */
    update(channelId, docId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.docs.docUpdate({
                channelId,
                docId,
                requestBody: options,
            });
            return data.doc;
        });
    }
    /**
     * Delete a Doc from a channel.
     *
     * @param channelId - The ID of the channel where the Doc is located.
     * @param docId - The ID of the Doc to delete.
     * @returns A Promise that resolves with void when the Doc is successfully deleted.
     */
    delete(channelId, docId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.rest.router.docs.docDelete({ channelId, docId });
        });
    }
}
exports.GlobalDocManager = GlobalDocManager;
//# sourceMappingURL=DocManager.js.map