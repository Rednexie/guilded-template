"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalCategoryManager = void 0;
const Category_1 = require("../../structures/Category");
const CacheableStructManager_1 = require("./CacheableStructManager");
/**
 * Manager for interacting with Catregories on Guilded.
 */
class GlobalCategoryManager extends CacheableStructManager_1.CacheableStructManager {
    /**
     * Create a new category
     *
     * @param serverId The ID of the server to create the category in.
     * @param options Category creation options
     * @returns Promise that resolves with the newly created category
     */
    create(serverId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.categories.categoryCreate({
                serverId,
                requestBody: options,
            });
            const createdCategory = new Category_1.Category(this.client, data.category);
            this.cache.set(createdCategory.id, createdCategory);
            return createdCategory;
        });
    }
    fetch(serverId, categoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.categories.categoryRead({
                serverId,
                categoryId,
            });
            const fetchedCategory = new Category_1.Category(this.client, data.category);
            this.cache.set(fetchedCategory.id, fetchedCategory);
            return fetchedCategory;
        });
    }
    /**
     * Update a category
     *
     * @param serverId The ID of the server to update the category in.
     * @param categoryId The ID of the category to update.
     * @param options The options to update the category with.
     * @returns A Promise that resolves with the updated category.
     */
    update(serverId, categoryId, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.categories.categoryUpdate({
                serverId,
                categoryId,
                requestBody: options,
            });
            let category = (_a = this.cache.get(data.category.id)) === null || _a === void 0 ? void 0 : _a._update(data.category);
            category !== null && category !== void 0 ? category : (category = new Category_1.Category(this.client, data.category));
            return category;
        });
    }
    /**
     * Delete a category
     *
     * @param serverId The ID of the server to delete the category from.
     * @param categoryId The ID of the category to delete.
     * @returns A Promise that resolves when the operation is complete.
     */
    delete(serverId, categoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.rest.router.categories.categoryDelete({ serverId, categoryId });
            if (this.cache.has(categoryId))
                this.cache.delete(categoryId);
        });
    }
}
exports.GlobalCategoryManager = GlobalCategoryManager;
//# sourceMappingURL=CategoryManager.js.map