"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalSubscriptionManager = void 0;
const Subscription_1 = require("../../structures/Subscription");
const GlobalManager_1 = require("./GlobalManager");
/**
 * A class representing a global subscription tier manager.
 */
class GlobalSubscriptionManager extends GlobalManager_1.GlobalManager {
    /**
     * Fetches a subscription tier from a server.
     *
     * @param serverId The ID of the server to fetch the subscription tier from.
     * @param tier The type of subscription tier to fetch.
     * @returns A Promise that resolves with the fetched subscription tier.
     */
    fetch(serverId, tier) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.serverSubscriptions.serverSubscriptionTierRead({ serverId, serverSubscriptionTierType: tier });
            return new Subscription_1.ServerSubscriptionTier(this.client, data.serverSubscriptionTier);
        });
    }
    /**
     * Fetches all the subscription tiers from a server.
     *
     * @param serverId The ID of the server to fetch subscription tiers from.
     * @returns A Promise that resolves with an array of subscription tiers.
     */
    fetchMany(serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.serverSubscriptions.serverSubscriptionTierReadMany({
                serverId,
            });
            const serverSubscriptionTiers = [];
            for (const tier of data.serverSubscriptionTiers) {
                serverSubscriptionTiers.push(new Subscription_1.ServerSubscriptionTier(this.client, tier));
            }
            return serverSubscriptionTiers;
        });
    }
}
exports.GlobalSubscriptionManager = GlobalSubscriptionManager;
//# sourceMappingURL=SubscriptionManager.js.map