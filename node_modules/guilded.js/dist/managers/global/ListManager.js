"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalListItemManager = void 0;
const GlobalManager_1 = require("./GlobalManager");
/**
 * A class representing a manager for list items at a global level.
 */
class GlobalListItemManager extends GlobalManager_1.GlobalManager {
    /**
     * Creates a new list item.
     *
     * @param channelId The ID of the channel to create the list item in.
     * @param options Additional options for the list item.
     * @returns A Promise that resolves with the newly created list item.
     */
    create(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.listItems.listItemCreate({
                channelId,
                requestBody: options,
            });
            return data.listItem;
        });
    }
    /**
     * Fetches multiple list items.
     *
     * @param channelId The ID of the channel to fetch the list items from.
     * @returns A Promise that resolves with an array of list item summaries.
     */
    fetchMany(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.listItems.listItemReadMany({
                channelId,
            });
            return data.listItems;
        });
    }
    /**
     * Fetches a single list item.
     *
     * @param channelId The ID of the channel that the list item belongs to.
     * @param listItemId The ID of the list item to fetch.
     * @returns A Promise that resolves with the requested list item.
     */
    fetch(channelId, listItemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.listItems.listItemRead({
                channelId,
                listItemId,
            });
            return data.listItem;
        });
    }
    /**
     * Updates a list item.
     *
     * @param channelId The ID of the channel that the list item belongs to.
     * @param listItemId The ID of the list item to update.
     * @param options Additional options for the updated list item.
     * @returns A Promise that resolves with the updated list item.
     */
    update(channelId, listItemId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this.client.rest.router.listItems.listItemUpdate({
                channelId,
                listItemId,
                requestBody: options,
            });
            return data.listItem;
        });
    }
    /**
     * Deletes a list item.
     *
     * @param channelId The ID of the channel that the list item belongs to.
     * @param listItemId The ID of the list item to delete.
     * @returns A Promise that resolves with no value upon successful deletion.
     */
    delete(channelId, listItemId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.rest.router.listItems.listItemDelete({
                channelId,
                listItemId,
            });
        });
    }
    /**
     * Marks a list item as complete.
     *
     * @param channelId The ID of the channel that the list item belongs to.
     * @param listItemId The ID of the list item to mark as complete.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    complete(channelId, listItemId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.rest.router.listItems.listItemCompleteCreate({
                channelId,
                listItemId,
            });
        });
    }
    /**
     * Marks a completed list item as incomplete.
     *
     * @param channelId The ID of the channel that the list item belongs to.
     * @param listItemId The ID of the completed list item to mark as incomplete.
     * @returns A Promise that resolves with no value upon successful uncompletion.
     */
    uncomplete(channelId, listItemId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.rest.router.listItems.listItemCompleteDelete({
                channelId,
                listItemId,
            });
        });
    }
}
exports.GlobalListItemManager = GlobalListItemManager;
//# sourceMappingURL=ListManager.js.map