"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalUserManager = void 0;
const collection_1 = require("@discordjs/collection");
const Server_1 = require("../../structures/Server");
const User_1 = require("../../structures/User");
const CacheableStructManager_1 = require("./CacheableStructManager");
/**
 * A manager for interacting with users. You can retrieve users from the .cache property.
 * At this point in time, Users cache population is heavily reliant on the Member cache.
 *
 * @extends CacheableStructManager
 */
class GlobalUserManager extends CacheableStructManager_1.CacheableStructManager {
    /**
     * Fetches client user.
     *
     * @param force Whether to force a fetch from the API.
     * @returns A Promise that resolves with the fetched user.
     */
    fetchClient(force) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!force) {
                const existingUser = this.client.users.cache.get(this.client.user.id);
                if (existingUser)
                    return existingUser;
            }
            const data = yield this.client.rest.router.users.userRead({
                userId: "@me",
            });
            return new User_1.User(this.client, data.user);
        });
    }
    /**
     * Fetches a user's servers (atm, only the logged in client is supported)
     *
     * @param userId The ID of the user to fetch servers for.
     * @returns A promise that resolves to a Collection with the returned servers.
     */
    fetchServers(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (userId !== this.client.user.id)
                throw new Error("Only the logged in client is supported at this time.");
            const data = yield this.client.rest.router.users.userServerReadMany({
                userId,
            });
            const servers = new collection_1.Collection();
            for (const server of data.servers) {
                const createdServer = new Server_1.Server(this.client, server);
                servers.set(server.id, createdServer);
                this.client.servers.cache.set(server.id, createdServer);
            }
            return servers;
        });
    }
}
exports.GlobalUserManager = GlobalUserManager;
//# sourceMappingURL=UserManager.js.map