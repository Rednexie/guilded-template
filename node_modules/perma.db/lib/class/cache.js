
class CacheDB{

    constructor() {
        this.data = new Map();
      }
    
    

     map(){
    return this.data
    }

     set(key, value) {
    this.data.set(key, value);
    }

     get(key) {
    return this.data.get(key);
    }

     has(key) {
    return this.data.has(key);
    }

     remove(key) {
    this.data.delete(key);
    }

     clear() {
    this.data.clear();
    }

     size(){
        return this.data.size
    }

     all(){
    return Array.from(this.data, ([key, value]) => ({ [key]: value }));
    }

     obj(){
    // {..this.data}
    return Array.from(this.data, ([key, value]) => ({ [key]: value }));
    }

     keys() {
        return Array.from(this.data.keys());
    }

     values() {
    return Array.from(this.data.values());
    }
     entries() {
    return Array.from(this.data.entries());
    }

     forEach(callback) {
    this.data.forEach((value, key) => {
        callback(value, key);
    });
    }

     isNull(key) {
    const value = this.data.get(key);
    return value === null || value === undefined;
    }

     update(key, value) {
    if (this.data.has(key)) {
        this.data.set(key, value);
        return true;
    }
    return false;
    }

     prefix(prefix) {
    return Array.from(this.data.keys()).filter(key => key.startsWith(prefix));
    }

     isEmpty() {
    return this.data.size === 0;
    }


     type(key) {
    // Returns the type of the value associated with the key
    const value = this.data.get(key);
    if (value === null || value === undefined) {
        return 'null';
    }
    if (Array.isArray(value)) {
        return 'array';
    }
    return typeof value;
    }


     deleteAll(keys) {
    // Deletes all the keys from the map
    keys.forEach(key => {
        this.data.delete(key);
    });
    }


     expire(key, time) {
    return new Promise((resolve) => {
        setTimeout(() => {
        this.data.delete(key);
        resolve();
        }, time);
    });
    }

    object = {
    set: (key, value) => {
        this.data.set(key,JSON.stringify(value))
    },
    get: (key) => {
        return JSON.parse(this.data.get(key))
    }
    }

}



module.exports = CacheDB