const Sqlite3 = require('better-sqlite3');
const CacheDB = require("../cache/class/");

const fs = require("fs");
const path = require("path")



class PermaDB {
  constructor(dbn, options = {}) {
    this.dbn = this.dbn || "perma.db"

    this.db = new Sqlite3(dbn);
    this.initTable();

    this.options = this.options || {}
    if (this.options.vacuum) {
        this.db.exec('VACUUM');
    }
    if(this.options.memory){
        this.cache = new CacheDB()
        this.db.all().forEach(item => {
            this.cache.set(item.key, item.value)
        })
    }
  }

  initTable() {
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS perma (
        key TEXT PRIMARY KEY,
        value TEXT
      )
    `);
   }

   
   set(key, value){
    
    const insert = this.db.prepare('INSERT OR REPLACE INTO perma (key, value) VALUES (?, ?)');
    if(typeof value == "boolean") value = String(value)
    insert.run(key, value)
  }
  
  get(key){
    const select = this.this.db.prepare('SELECT value FROM perma WHERE key = ?');
    const result = select.get(key);
    return result ? result.value : null;
  }
  
  has(key){
    return !!this.this.db.get(key)
  }
  
  delete(key){
    const del = this.db.prepare('DELETE FROM perma WHERE key = ?');
    del.run(key)
  }
  
  all() {
    const all = this.db.prepare('SELECT * FROM perma');
    return all.all();
  }
  
  type(key) {
    const value = this.db.get(key);
    return typeof value;
  }
  
  deleteAll() {
    const deleteall = this.db.prepare('DELETE FROM perma');
    deleteall.run();
  }
  
  deleteDB() {
    this.db.close()
    fs.unlinkSync(path.basename(this.db.name))
  }

  vacuumCli(){
  
  if(!process.env.sqlite3) console.error("sqlite3 is not installed.\nhttps://www.sqlite.org/");
  
  if(process.platform == "win32"){
    if(fs.existsSync(execSync(`where sqlite3`, {encoding: "utf8"}))) console.log(execSync(`sqlite3 ${path.basename(this.db.name)} "VACUUM;"`, {encoding: "utf8"}))
  }
  
  else
    if(fs.existsSync(execSync(`which sqlite3`, {encoding: "utf8"}))) console.log(execSync(`sqlite3 ${path.basename(this.db.name)} "VACUUM;"`, {encoding: "utf8"}))
  }
  
  
  
  vacuum(){
    this.db.exec("VACUUM")
  }
  
  backup(path){ 
    this.db.exec(`VACUUM INTO '${path}'`);
  }
  
  

}

module.exports = PermaDB