"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelsService = void 0;
class ChannelsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Create a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelCreate({ requestBody, }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels",
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Get a channel
     * Must be a member of the server to get the channel. Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelRead({ channelId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}",
            path: {
                channelId: channelId,
            },
        });
    }
    /**
     * Update a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns any Success
     * @throws ApiError
     */
    channelUpdate({ channelId, requestBody, }) {
        return this.httpRequest.request({
            method: "PATCH",
            url: "/channels/{channelId}",
            path: {
                channelId: channelId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a channel
     * Only server channels are supported at this time (coming soon™: DM Channels!)
     * @returns void
     * @throws ApiError
     */
    channelDelete({ channelId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}",
            path: {
                channelId: channelId,
            },
        });
    }
    /**
     * Archive a channel
     * @returns void
     * @throws ApiError
     */
    channelArchiveCreate({ channelId }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/channels/{channelId}/archive",
            path: {
                channelId: channelId,
            },
        });
    }
    /**
     * Restore an archived channel
     * @returns void
     * @throws ApiError
     */
    channelArchiveDelete({ channelId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/archive",
            path: {
                channelId: channelId,
            },
        });
    }
}
exports.ChannelsService = ChannelsService;
//# sourceMappingURL=ChannelsService.js.map