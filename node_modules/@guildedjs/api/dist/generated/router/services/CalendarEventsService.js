"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventsService = void 0;
class CalendarEventsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Create a calendar event
     * We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
     * @returns any Success
     * @throws ApiError
     */
    calendarEventCreate({ channelId, requestBody, }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels/{channelId}/events",
            path: {
                channelId: channelId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Get calendar events
     * Results returned will be ordered ascending by the event's `startsAt`. `before` and `after` will filter based on the event's `startsAt`
     * @returns any Success
     * @throws ApiError
     */
    calendarEventReadMany({ channelId, before, after, limit = 25 }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/events",
            path: {
                channelId: channelId,
            },
            query: {
                before: before,
                after: after,
                limit: limit,
            },
        });
    }
    /**
     * Get a calendar event
     * @returns any Success
     * @throws ApiError
     */
    calendarEventRead({ channelId, calendarEventId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/events/{calendarEventId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
            },
        });
    }
    /**
     * Update a calendar event
     * We currently do not have a way to surface the `repeatInfo` after event series are updated. Stay tuned!
     * @returns any Success
     * @throws ApiError
     */
    calendarEventUpdate({ channelId, calendarEventId, requestBody, }) {
        return this.httpRequest.request({
            method: "PATCH",
            url: "/channels/{channelId}/events/{calendarEventId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a calendar event
     * @returns void
     * @throws ApiError
     */
    calendarEventDelete({ channelId, calendarEventId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/events/{calendarEventId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
            },
        });
    }
    /**
     * Get a calendar event RSVP
     * @returns any Success
     * @throws ApiError
     */
    calendarEventRsvpRead({ channelId, calendarEventId, userId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
                userId: userId,
            },
        });
    }
    /**
     * Create or update a calendar event RSVP
     * @returns any Success
     * @throws ApiError
     */
    calendarEventRsvpUpdate({ channelId, calendarEventId, userId, requestBody, }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
                userId: userId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a calendar event RSVP
     * @returns void
     * @throws ApiError
     */
    calendarEventRsvpDelete({ channelId, calendarEventId, userId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/events/{calendarEventId}/rsvps/{userId}",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
                userId: userId,
            },
        });
    }
    /**
     * Get calendar event RSVPs
     * @returns any Success
     * @throws ApiError
     */
    calendarEventRsvpReadMany({ channelId, calendarEventId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/events/{calendarEventId}/rsvps",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
            },
        });
    }
    /**
     * Create or update a calendar event RSVP for multiple users
     * @returns void
     * @throws ApiError
     */
    calendarEventRsvpUpdateMany({ channelId, calendarEventId, requestBody, }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/channels/{channelId}/events/{calendarEventId}/rsvps",
            path: {
                channelId: channelId,
                calendarEventId: calendarEventId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
}
exports.CalendarEventsService = CalendarEventsService;
//# sourceMappingURL=CalendarEventsService.js.map