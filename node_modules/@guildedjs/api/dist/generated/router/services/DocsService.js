"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocsService = void 0;
class DocsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Create a doc
     * @returns any Success
     * @throws ApiError
     */
    docCreate({ channelId, requestBody, }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels/{channelId}/docs",
            path: {
                channelId: channelId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Get docs
     * Results returned will be ordered descending by the doc's `updatedAt`. `before` will filter based on the doc's `updatedAt`
     * @returns any Success
     * @throws ApiError
     */
    docReadMany({ channelId, before, limit = 25 }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/docs",
            path: {
                channelId: channelId,
            },
            query: {
                before: before,
                limit: limit,
            },
        });
    }
    /**
     * Get a doc
     * @returns any Success
     * @throws ApiError
     */
    docRead({ channelId, docId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/docs/{docId}",
            path: {
                channelId: channelId,
                docId: docId,
            },
        });
    }
    /**
     * Update a doc
     * @returns any Success
     * @throws ApiError
     */
    docUpdate({ channelId, docId, requestBody, }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/channels/{channelId}/docs/{docId}",
            path: {
                channelId: channelId,
                docId: docId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a doc
     * @returns void
     * @throws ApiError
     */
    docDelete({ channelId, docId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/docs/{docId}",
            path: {
                channelId: channelId,
                docId: docId,
            },
        });
    }
}
exports.DocsService = DocsService;
//# sourceMappingURL=DocsService.js.map