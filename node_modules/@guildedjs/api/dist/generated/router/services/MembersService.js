"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembersService = void 0;
class MembersService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Update a member's nickname
     * @returns any Success
     * @throws ApiError
     */
    memberNicknameUpdate({ serverId, userId, requestBody, }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/servers/{serverId}/members/{userId}/nickname",
            path: {
                serverId: serverId,
                userId: userId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a member's nickname
     * @returns void
     * @throws ApiError
     */
    memberNicknameDelete({ serverId, userId, }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/servers/{serverId}/members/{userId}/nickname",
            path: {
                serverId: serverId,
                userId: userId,
            },
        });
    }
    /**
     * Get a server member
     * @returns any Success
     * @throws ApiError
     */
    serverMemberRead({ serverId, userId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/servers/{serverId}/members/{userId}",
            path: {
                serverId: serverId,
                userId: userId,
            },
        });
    }
    /**
     * Kick a server member
     * This route can be used to leave servers by passing in your own user ID or `@me` for `userId`
     * @returns void
     * @throws ApiError
     */
    serverMemberDelete({ serverId, userId, }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/servers/{serverId}/members/{userId}",
            path: {
                serverId: serverId,
                userId: userId,
            },
        });
    }
    /**
     * Get members of a server
     * Results returned will be ordered ascending by the member's `joinedAt`
     * @returns any Success
     * @throws ApiError
     */
    serverMemberReadMany({ serverId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/servers/{serverId}/members",
            path: {
                serverId: serverId,
            },
        });
    }
}
exports.MembersService = MembersService;
//# sourceMappingURL=MembersService.js.map