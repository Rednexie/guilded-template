"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatService = void 0;
class ChatService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Create a channel message
     * @returns any Success
     * @throws ApiError
     */
    channelMessageCreate({ channelId, requestBody, }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels/{channelId}/messages",
            path: {
                channelId: channelId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Get channel messages
     * Results returned will be ordered ascending by the message's `createdAt`. `before` and `after` will filter based on the message's `createdAt`
     * @returns any Success
     * @throws ApiError
     */
    channelMessageReadMany({ channelId, before, after, limit = 50, includePrivate = false, }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/messages",
            path: {
                channelId: channelId,
            },
            query: {
                before: before,
                after: after,
                limit: limit,
                includePrivate: includePrivate,
            },
        });
    }
    /**
     * Get a channel message
     * Get details for a specific chat message from a chat channel.
     * @returns any Success
     * @throws ApiError
     */
    channelMessageRead({ channelId, messageId, }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/messages/{messageId}",
            path: {
                channelId: channelId,
                messageId: messageId,
            },
        });
    }
    /**
     * Update a channel message
     * @returns any Success
     * @throws ApiError
     */
    channelMessageUpdate({ channelId, messageId, requestBody, }) {
        return this.httpRequest.request({
            method: "PUT",
            url: "/channels/{channelId}/messages/{messageId}",
            path: {
                channelId: channelId,
                messageId: messageId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete a channel message
     * @returns void
     * @throws ApiError
     */
    channelMessageDelete({ channelId, messageId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/messages/{messageId}",
            path: {
                channelId: channelId,
                messageId: messageId,
            },
        });
    }
    /**
     * Pin a message
     * @returns void
     * @throws ApiError
     */
    channelMessagePinCreate({ channelId, messageId }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels/{channelId}/messages/{messageId}/pin",
            path: {
                channelId: channelId,
                messageId: messageId,
            },
        });
    }
    /**
     * Unpin a message
     * @returns void
     * @throws ApiError
     */
    channelMessagePinDelete({ channelId, messageId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/messages/{messageId}/pin",
            path: {
                channelId: channelId,
                messageId: messageId,
            },
        });
    }
}
exports.ChatService = ChatService;
//# sourceMappingURL=ChatService.js.map