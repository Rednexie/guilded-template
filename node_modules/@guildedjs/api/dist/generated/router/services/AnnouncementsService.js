"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnouncementsService = void 0;
class AnnouncementsService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Create an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementCreate({ channelId, requestBody, }) {
        return this.httpRequest.request({
            method: "POST",
            url: "/channels/{channelId}/announcements",
            path: {
                channelId: channelId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Get announcements
     * Results returned will be ordered ascending by the announcement's `createdAt`. `before` will filter based on the announcement's `createdAt`
     * @returns any Success
     * @throws ApiError
     */
    announcementReadMany({ channelId, before, limit = 25 }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/announcements",
            path: {
                channelId: channelId,
            },
            query: {
                before: before,
                limit: limit,
            },
        });
    }
    /**
     * Read an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementRead({ channelId, announcementId }) {
        return this.httpRequest.request({
            method: "GET",
            url: "/channels/{channelId}/announcements/{announcementId}",
            path: {
                channelId: channelId,
                announcementId: announcementId,
            },
        });
    }
    /**
     * Update an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementUpdate({ channelId, announcementId, requestBody, }) {
        return this.httpRequest.request({
            method: "PATCH",
            url: "/channels/{channelId}/announcements/{announcementId}",
            path: {
                channelId: channelId,
                announcementId: announcementId,
            },
            body: requestBody,
            mediaType: "application/json",
        });
    }
    /**
     * Delete an announcement
     * @returns void
     * @throws ApiError
     */
    announcementDelete({ channelId, announcementId }) {
        return this.httpRequest.request({
            method: "DELETE",
            url: "/channels/{channelId}/announcements/{announcementId}",
            path: {
                channelId: channelId,
                announcementId: announcementId,
            },
        });
    }
}
exports.AnnouncementsService = AnnouncementsService;
//# sourceMappingURL=AnnouncementsService.js.map