"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestManager = void 0;
const node_events_1 = __importDefault(require("node:events"));
const form_data_1 = __importDefault(require("form-data"));
const qs_1 = require("qs");
const router_1 = require("../generated/router");
const GuildedAPIError_1 = require("./errors/GuildedAPIError");
const PermissionsError_1 = require("./errors/PermissionsError");
let HTTPFetch = globalThis.fetch;
if (!HTTPFetch) {
    HTTPFetch = require("node-fetch");
}
const packageDetails = require("../../package.json");
const sleep = (ms) => __awaiter(void 0, void 0, void 0, function* () { return new Promise((resolve) => setTimeout(resolve, ms)); });
class RestManager {
    constructor(options) {
        var _a;
        this.options = options;
        /**
         * The bot token to be used for making requests.
         */
        this.token = this.options.token;
        /**
         * The version of the API to be used for making requests. By default, this will use the latest version that the library supports.
         */
        this.version = (_a = this.options.version) !== null && _a !== void 0 ? _a : 1;
        /**
         * The proxy url if it was set.
         */
        this.proxyURL = this.options.proxyURL;
        /**
         * Logging emitter
         */
        this.emitter = new node_events_1.default();
        /**
         * Utility router
         */
        this.router = new router_1.GuildedRouter(this);
    }
    /**
     * The base url to send the request to.
     */
    get baseURL() {
        var _a;
        return (_a = this.proxyURL) !== null && _a !== void 0 ? _a : `https://www.guilded.gg/api/v${this.version}`;
    }
    /**
     * Generate obfuscated token. It replaces every char in a non-even index with X. I'm not very creative.
     */
    get obfuscatedToken() {
        return this.token
            .split("")
            .map(() => "X")
            .join("");
    }
    make(data, authenticated = true, retryCount = 0, { returnAsText = false, bodyIsJSON = true } = {}) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            // If this request requires authentication, add the Bearer token as a header.
            if (authenticated)
                headers.Authorization = `Bearer ${this.token}`;
            // Append stringified query params to the URL. This doesn't append the base URL yet.
            const queryAppendedURL = data.query ? `${data.path}?${(0, qs_1.stringify)(data.query)}` : data.path;
            // All options to be sent with the request
            const requestOptions = {
                url: this.baseURL + queryAppendedURL,
                headers: Object.assign(Object.assign({ 
                    // This gets changed later on if the request is formdata.
                    "content-type": "application/json", 
                    // Used for logging on Guilded end.
                    "User-Agent": `@guildedjs-rest/${packageDetails.version} Node.js ${process.version}` }, headers), data.headers),
                method: data.method,
            };
            // This mostly only applies to Webhook routes that allow you to attach files.
            if (data.body instanceof form_data_1.default) {
                // Turn the formdata into a buffer.
                requestOptions.body = data.body.getBuffer();
                // Merge the formdata generated boundary headers with the request headers. This will replace things like content-type and other conflicting headers.
                Object.assign(requestOptions.headers, Object.assign({}, data.body.getHeaders()));
            }
            else if (bodyIsJSON) {
                // Turn JSON data into string.
                requestOptions.body = JSON.stringify(data.body);
            }
            this.emitter.emit("request", requestOptions);
            // The reason we're hoisting the variable like this is so that we can have error handling for the underlying fetch request.
            let response;
            try {
                response = yield HTTPFetch(requestOptions.url, requestOptions);
            }
            catch (error) {
                throw new Error(`Error while making API call, ${error.message.toString()}`);
            }
            if (!response.ok) {
                const mapHeadersToObj = {};
                // This is done because Headers isn't stringifiable or iterable without the use of the forEach method.
                // eslint-disable-next-line unicorn/no-array-for-each
                response.headers.forEach((v, k) => {
                    mapHeadersToObj[k] = v;
                });
                // Occurs when ratelimited.
                if (response.status === 429) {
                    const retryAfterTime = Number((_a = response.headers.get("Retry-After")) !== null && _a !== void 0 ? _a : 35);
                    // Check if request has failed 3+ times.
                    if (retryCount >= ((_c = (_b = this.options) === null || _b === void 0 ? void 0 : _b.maxRatelimitRetryLimit) !== null && _c !== void 0 ? _c : 3)) {
                        throw new Error("MAX REQUEST RATELIMIT RETRY LIMIT REACHED.");
                    }
                    this.emitter.emit("ratelimit", Object.assign(Object.assign({}, requestOptions), { responseHeaders: mapHeadersToObj }));
                    // Make the thread wait the amount of time specified in the Retry-After before retrying request.
                    yield sleep(retryAfterTime * 1000);
                    return this.make(data, authenticated, ++retryCount);
                }
                // Parse error response as text. The reason this isn't in the try/catch statement is because of the HEAD method not returning json.
                const rawResponse = yield response.text().catch(() => "Could not read underlying response body buffer"); // this shouldn't happen
                let parsedResponse = rawResponse;
                let errorMessage = parsedResponse;
                if (requestOptions.method !== "HEAD" && response.status !== 204) {
                    // json body won't be returned in these cases, so don't attempt to parse as json
                    try {
                        parsedResponse = JSON.parse(rawResponse);
                        errorMessage = parsedResponse.message;
                    }
                    catch (_d) {
                        // response was still malformed somehow; just allow it to be reported as text
                    }
                }
                // Details response object for error reporting.
                const responseDetails = {
                    status: response.status,
                    headers: mapHeadersToObj,
                    body: parsedResponse,
                };
                // obfuscate token in requestOptions for logging purposes.
                requestOptions.headers.Authorization = "[OBFUSCATED]";
                // parse stringified JSON bodies back to JSON (added bonus of being able to check here if anything went wrong during the stringifying with any toJSON overrides)
                if (bodyIsJSON && typeof requestOptions.body === "string")
                    requestOptions.body = JSON.parse(requestOptions.body);
                // this.emitter.emit("error", requestOptions, responseDetails);
                // Occurs when bot has a permission missing
                if (responseDetails.status === 403) {
                    throw new PermissionsError_1.PermissionsError(errorMessage, requestOptions, responseDetails);
                }
                throw new GuildedAPIError_1.GuildedAPIError(errorMessage, requestOptions, responseDetails);
            }
            return [response, returnAsText ? response.text() : response.json().catch(() => ({}))];
        });
    }
    get(path, query, authenticated = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.make({
                method: "GET",
                path,
                query,
            }, authenticated).then((x) => __awaiter(this, void 0, void 0, function* () { return x[1]; }));
        });
    }
    post(path, body, authenticated = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.make({
                body,
                method: "POST",
                path,
            }, authenticated).then((x) => __awaiter(this, void 0, void 0, function* () { return x[1]; }));
        });
    }
    delete(path, body, authenticated = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.make({
                body,
                method: "DELETE",
                path,
            }, authenticated).then((x) => __awaiter(this, void 0, void 0, function* () { return x[1]; }));
        });
    }
    patch(path, body, authenticated = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.make({
                body,
                method: "PATCH",
                path,
            }, authenticated).then((x) => __awaiter(this, void 0, void 0, function* () { return x[1]; }));
        });
    }
    put(path, body, authenticated = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.make({
                body,
                method: "PUT",
                path,
            }, authenticated).then((x) => __awaiter(this, void 0, void 0, function* () { return x[1]; }));
        });
    }
}
exports.RestManager = RestManager;
//# sourceMappingURL=RestManager.js.map