"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookEmbed = void 0;
const color_1 = require("../util/color");
class WebhookEmbed {
    constructor(data) {
        this.footer = null;
        this.image = null;
        this.thumbnail = null;
        this.author = null;
        this.fields = [];
        this.video = null;
        this.provider = null;
        this.color = null;
        this.timestamp = null;
        this.timestampString = null;
        this.description = null;
        this.url = null;
        this.title = null;
        if (data)
            this.update(data);
    }
    /* istanbul ignore next */
    update(data) {
        if ("color" in data && data.color !== undefined) {
            this.setColor(data.color);
        }
        if ("timestamp" in data && data.timestamp !== undefined) {
            this.setTimestamp(data.timestamp);
        }
        if ("title" in data && data.title !== undefined) {
            this.setTitle(data.title);
        }
        if ("description" in data && data.description !== undefined) {
            this.setDescription(data.description);
        }
        if ("url" in data && data.url !== undefined) {
            this.setURL(data.url);
        }
        if ("provider" in data && data.provider !== undefined) {
            this.setProvider(data.provider.name, data.provider.url);
        }
        if ("footer" in data && data.footer !== undefined) {
            this.setFooter(data.footer.text, data.footer.icon_url, data.footer.proxy_icon_url);
        }
        if ("image" in data && data.image !== undefined) {
            this.setImage(data.image.url, data.image.height, data.image.width, data.image.proxy_url);
        }
        if ("thumbnail" in data && data.thumbnail !== undefined) {
            this.setThumbnail(data.thumbnail.url, data.thumbnail.height, data.thumbnail.width, data.thumbnail.proxy_url);
        }
        if ("author" in data && data.author !== undefined) {
            this.setAuthor(data.author.name, data.author.icon_url, data.author.url, data.author.proxy_icon_url);
        }
        if ("fields" in data && data.fields !== undefined) {
            this.addFields(data.fields);
        }
        if ("video" in data && data.video !== undefined) {
            this.setVideo(data.video.url, data.video.height, data.video.width, data.video.proxy_url);
        }
    }
    setTitle(title) {
        this.title = title !== null && title !== void 0 ? title : null;
        return this;
    }
    setDescription(description) {
        this.description = description !== null && description !== void 0 ? description : null;
        return this;
    }
    setURL(url) {
        this.url = url !== null && url !== void 0 ? url : null;
        return this;
    }
    setTimestamp(timestamp) {
        if (timestamp === null) {
            this.timestamp = null;
            this.timestampString = null;
            return this;
        }
        if (!timestamp) {
            return this.setTimestamp(new Date());
        }
        const parsedTimestamp = timestamp instanceof Date ? timestamp : Number.isInteger(timestamp) || typeof timestamp === "string" ? new Date(timestamp) : null;
        if (!parsedTimestamp || (parsedTimestamp instanceof Date && Number.isNaN(parsedTimestamp.getTime()))) {
            throw new TypeError("Invalid DateResolvable passed into setTimestamp.");
        }
        this.timestamp = parsedTimestamp.getTime();
        this.timestampString = parsedTimestamp.toISOString();
        return this;
    }
    setColor(color) {
        this.color = color ? (0, color_1.resolveColor)(color) : null;
        return this;
    }
    setFooter(text, iconURL, proxyIconURL) {
        this.footer = text ? { iconURL: iconURL !== null && iconURL !== void 0 ? iconURL : null, proxyIconURL: proxyIconURL !== null && proxyIconURL !== void 0 ? proxyIconURL : null, text } : null;
        return this;
    }
    setImage(url, height, width, proxyURL) {
        this.image = url
            ? {
                height: height !== null && height !== void 0 ? height : null,
                proxyURL: proxyURL !== null && proxyURL !== void 0 ? proxyURL : null,
                url,
                width: width !== null && width !== void 0 ? width : null,
            }
            : null;
        return this;
    }
    setThumbnail(url, height, width, proxyURL) {
        this.thumbnail = url
            ? {
                height: height !== null && height !== void 0 ? height : null,
                proxyURL: proxyURL !== null && proxyURL !== void 0 ? proxyURL : null,
                url,
                width: width !== null && width !== void 0 ? width : null,
            }
            : null;
        return this;
    }
    setVideo(url, height, width, proxyURL) {
        this.video = url
            ? {
                height: height !== null && height !== void 0 ? height : null,
                proxyURL: proxyURL !== null && proxyURL !== void 0 ? proxyURL : null,
                url,
                width: width !== null && width !== void 0 ? width : null,
            }
            : null;
        return this;
    }
    setProvider(name, url) {
        this.provider = name && url ? { name: name !== null && name !== void 0 ? name : null, url: url !== null && url !== void 0 ? url : null } : null;
        return this;
    }
    setAuthor(name, iconURL, url, proxyIconURL) {
        this.author = name
            ? {
                iconURL: iconURL !== null && iconURL !== void 0 ? iconURL : null,
                name: name !== null && name !== void 0 ? name : null,
                proxyIconURL: proxyIconURL !== null && proxyIconURL !== void 0 ? proxyIconURL : null,
                url: url !== null && url !== void 0 ? url : null,
            }
            : null;
        return this;
    }
    addFields(fields) {
        this.fields.push(...fields.map((field) => {
            var _a;
            return ({
                inline: (_a = field.inline) !== null && _a !== void 0 ? _a : false,
                name: field.name,
                value: field.value,
            });
        }));
        return this;
    }
    addField(name, value, inline) {
        this.addFields([{ inline, name, value }]);
        return this;
    }
    clearFields() {
        this.fields.length = 0;
        return this;
    }
    toJSON() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
        return {
            author: ((_a = this.author) === null || _a === void 0 ? void 0 : _a.name)
                ? {
                    icon_url: (_b = this.author.iconURL) !== null && _b !== void 0 ? _b : undefined,
                    name: this.author.name,
                    proxy_icon_url: (_c = this.author.proxyIconURL) !== null && _c !== void 0 ? _c : undefined,
                    url: (_d = this.author.url) !== null && _d !== void 0 ? _d : undefined,
                }
                : undefined,
            color: (_e = this.color) !== null && _e !== void 0 ? _e : undefined,
            description: (_f = this.description) !== null && _f !== void 0 ? _f : undefined,
            fields: (_g = this.fields.map((field) => {
                var _a;
                return ({
                    inline: (_a = field.inline) !== null && _a !== void 0 ? _a : false,
                    name: field.name,
                    value: field.value,
                });
            })) !== null && _g !== void 0 ? _g : undefined,
            footer: this.footer
                ? {
                    icon_url: (_h = this.footer.iconURL) !== null && _h !== void 0 ? _h : undefined,
                    proxy_icon_url: (_j = this.footer.proxyIconURL) !== null && _j !== void 0 ? _j : undefined,
                    text: (_k = this.footer.text) !== null && _k !== void 0 ? _k : undefined,
                }
                : undefined,
            image: this.image
                ? {
                    height: (_l = this.image.height) !== null && _l !== void 0 ? _l : undefined,
                    proxy_url: (_m = this.image.proxyURL) !== null && _m !== void 0 ? _m : undefined,
                    url: (_o = this.image.url) !== null && _o !== void 0 ? _o : undefined,
                    width: (_p = this.image.width) !== null && _p !== void 0 ? _p : undefined,
                }
                : undefined,
            provider: this.provider
                ? {
                    name: (_q = this.provider.name) !== null && _q !== void 0 ? _q : undefined,
                    url: (_r = this.provider.url) !== null && _r !== void 0 ? _r : undefined,
                }
                : undefined,
            thumbnail: this.thumbnail
                ? {
                    height: (_s = this.thumbnail.height) !== null && _s !== void 0 ? _s : undefined,
                    proxy_url: (_t = this.thumbnail.proxyURL) !== null && _t !== void 0 ? _t : undefined,
                    url: (_u = this.thumbnail.url) !== null && _u !== void 0 ? _u : undefined,
                    width: (_v = this.thumbnail.width) !== null && _v !== void 0 ? _v : undefined,
                }
                : undefined,
            timestamp: (_w = this.timestampString) !== null && _w !== void 0 ? _w : undefined,
            title: (_x = this.title) !== null && _x !== void 0 ? _x : undefined,
            url: (_y = this.url) !== null && _y !== void 0 ? _y : undefined,
            video: this.video
                ? {
                    height: (_z = this.video.height) !== null && _z !== void 0 ? _z : undefined,
                    proxy_url: (_0 = this.video.proxyURL) !== null && _0 !== void 0 ? _0 : undefined,
                    url: (_1 = this.video.url) !== null && _1 !== void 0 ? _1 : undefined,
                    width: (_2 = this.video.width) !== null && _2 !== void 0 ? _2 : undefined,
                }
                : undefined,
        };
    }
}
exports.WebhookEmbed = WebhookEmbed;
//# sourceMappingURL=WebhookEmbed.js.map