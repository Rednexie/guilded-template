"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookClient = void 0;
const form_data_1 = __importDefault(require("form-data"));
const RestManager_1 = require("../RestManager");
const message_1 = require("../util/message");
class WebhookClient {
    constructor(webhookConnection, { username, avatarURL } = {}) {
        if (!webhookConnection) {
            throw new TypeError(`Must provide Webhook connection info in either string or object. Received ${webhookConnection}.`);
        }
        if (typeof webhookConnection === "string") {
            const destructuredWebhookURL = /guilded.gg\/webhooks\/(?<id>[^/]+)\/(?<token>[^/]+)/.exec(webhookConnection);
            if (!(destructuredWebhookURL === null || destructuredWebhookURL === void 0 ? void 0 : destructuredWebhookURL.length)) {
                throw new Error("Not a proper guilded webhook URL! Alternatively, you can provide an ID/token");
            }
            const [_, id, token] = destructuredWebhookURL;
            this.id = id;
            this.token = token;
        }
        else if (webhookConnection.id && webhookConnection.token) {
            this.id = webhookConnection.id;
            this.token = webhookConnection.token;
        }
        else {
            throw new TypeError("You must provide either a webhook URL or a webhook ID & token in an object when constructing the Webhook Client");
        }
        this.URL = `https://media.guilded.gg/webhooks/${this.id}/${this.token}`;
        this.rest = new RestManager_1.RestManager({ proxyURL: this.URL, token: this.token });
        this.username = username !== null && username !== void 0 ? username : null;
        this.avatarURL = avatarURL !== null && avatarURL !== void 0 ? avatarURL : null;
    }
    send(content, embeds, options) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            const contentIsObject = typeof content === "object";
            const resEmbeds = (0, message_1.transformEmbedToAPIEmbed)((_a = (contentIsObject ? content.embeds : embeds)) !== null && _a !== void 0 ? _a : []);
            const resFiles = contentIsObject ? content.files : options === null || options === void 0 ? void 0 : options.files;
            const baseBody = contentIsObject
                ? Object.assign(Object.assign({}, content), { embeds: resEmbeds }) : {
                content,
                embeds: resEmbeds,
                username: (_c = (_b = options === null || options === void 0 ? void 0 : options.username) !== null && _b !== void 0 ? _b : this.username) !== null && _c !== void 0 ? _c : undefined,
                avatar_url: (_e = (_d = options === null || options === void 0 ? void 0 : options.avatarURL) !== null && _d !== void 0 ? _d : this.avatarURL) !== null && _e !== void 0 ? _e : undefined,
            };
            let body = baseBody;
            const formData = new form_data_1.default();
            if (resFiles === null || resFiles === void 0 ? void 0 : resFiles.length) {
                for (const [index, value] of resFiles.entries()) {
                    formData.append(`files[${index}]`, value.content, {
                        filename: value.name,
                        filepath: value.path,
                    });
                }
                formData.append("payload_json", JSON.stringify(baseBody), {
                    contentType: "application/json",
                });
                body = formData;
            }
            const data = yield this.rest.post("", body);
            const parsedContent = (0, message_1.parseMessage)(data.content);
            return Object.assign(Object.assign({}, data), { content: parsedContent.parsedText, parsedContent, rawContent: data.content });
        });
    }
}
exports.WebhookClient = WebhookClient;
//# sourceMappingURL=WebhookClient.js.map