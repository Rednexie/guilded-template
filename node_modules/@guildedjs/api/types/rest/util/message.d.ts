/// <reference types="node" />
import type { APIContent, APIEmbed, RESTPostWebhookBody } from "../../generated/api-typings";
import { WebhookEmbed } from "../webhook/WebhookEmbed";
export type MessageAttachment = {
    content?: Buffer;
    name: string;
    path?: string;
};
export type WebhookMessageContent = string | (RESTPostWebhookBody & {
    embeds?: (APIEmbed | WebhookEmbed)[];
    files?: MessageAttachment[];
});
export declare const transformEmbedToAPIEmbed: (embeds: (APIEmbed | WebhookEmbed)[]) => APIEmbed[];
export declare function parseToMessage(input?: EmbedStructure | string, embed?: EmbedStructure): APIContent;
/**
 * Parse a message recieved from Guilded into a more digestable structure
 *
 * @internal
 */
export declare function parseMessage(data: APIContent): parsedMessage;
/**
 * A parsed message
 *
 * @internal
 */
export type parsedMessage = {
    embeds: APIEmbed[];
    mentions: {
        channels: string[];
        reactions: string[];
        roles: string[];
        users: string[];
    };
    parsedArr: parsedTextResponse[];
    parsedText: string;
};
/**
 * The mentions this message might contain
 *
 * @internal
 */
export type MessageDataNode = {
    channel?: {
        id: string;
        matcher: string;
        name: string;
    };
    mention?: {
        avatar?: string;
        color: string;
        id: number | string;
        matcher: string;
        name: string;
        nickname?: boolean;
        type: string;
    };
    reaction?: {
        id: string;
    };
};
export type EmbedStructure = APIEmbed | WebhookEmbed;
/**
 * The parsed text of each leaf in the message
 *
 * @internal
 */
export type parsedTextResponse = {
    channel?: unknown;
    content: string;
    mention?: unknown;
    reaction?: unknown;
    type: string;
};
/**
 * The message structure of a string -> message object suitable to send to guilded
 */
export type enforcedMessageStructure = {
    content: APIContent;
    messageId: string;
};
//# sourceMappingURL=message.d.ts.map