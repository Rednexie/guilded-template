/// <reference types="node" />
import type { Buffer } from "node:buffer";
import FormData from "form-data";
import type TypedEmitter from "typed-emitter";
import { GuildedRouter } from "../generated/router";
import type { RestOptions } from "./typings";
export type RequestOptions = {
    body?: BodyInit | Buffer;
    headers: Record<string, string>;
    method: HTTPMethods;
    url: string;
};
export type ResponseDetails = {
    body: JSONB | string;
    headers: Record<string, string>;
    status: number;
};
export type RestManagerEvents = {
    request(request: RequestOptions): void;
    error(req: RequestOptions, res: ResponseDetails): void;
    ratelimit(ratelimit: RequestOptions & {
        responseHeaders: Record<string, string>;
    }): void;
};
export declare class RestManager {
    readonly options: RestOptions;
    /**
     * The bot token to be used for making requests.
     */
    token: string;
    /**
     * The version of the API to be used for making requests. By default, this will use the latest version that the library supports.
     */
    version: 1;
    /**
     * The proxy url if it was set.
     */
    proxyURL: string | undefined;
    /**
     * Logging emitter
     */
    readonly emitter: TypedEmitter<RestManagerEvents>;
    /**
     * Utility router
     */
    readonly router: GuildedRouter;
    constructor(options: RestOptions);
    /**
     * The base url to send the request to.
     */
    get baseURL(): string;
    /**
     * Generate obfuscated token. It replaces every char in a non-even index with X. I'm not very creative.
     */
    get obfuscatedToken(): string;
    make<T extends JSONB, B = RequestBodyObject, Q = never>(data: MakeOptions<B, Q>, authenticated?: boolean, retryCount?: number, { returnAsText, bodyIsJSON }?: {
        bodyIsJSON?: boolean;
        returnAsText?: boolean;
    }): Promise<[Response, Promise<T | string>]>;
    get<T extends JSONB, Q = RequestBodyObject>(path: string, query?: Q, authenticated?: boolean): Promise<T>;
    post<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    delete<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
    patch<T extends JSONB, B = RequestBodyObject>(path: string, body: B, authenticated?: boolean): Promise<T>;
    put<T extends JSONB, B = RequestBodyObject>(path: string, body?: B, authenticated?: boolean): Promise<T>;
}
export type MakeOptions<B = RequestBodyObject, Q = RequestBodyObject> = {
    body?: B | FormData;
    headers?: Record<string, string>;
    isFormData?: boolean;
    method: HTTPMethods;
    path: string;
    query?: Q;
};
export type JSONB = Record<string, any>;
export type HTTPMethods = "DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT";
export type RequestBodyObject = JSONB | undefined;
//# sourceMappingURL=RestManager.d.ts.map