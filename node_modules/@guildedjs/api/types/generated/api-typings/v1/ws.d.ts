/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        _SocketEventEnvelope: {
            /**
             * Opcode
             *
             * @description An operation code corresponding to the nature of the sent message (for example, success, failure, etc.)
             * @enum {integer}
             */
            op: 0 | 1 | 2 | 8 | 9;
            /**
             * Data
             *
             * @description Data of any form depending on the underlying event
             */
            d?: Record<string, never>;
            /**
             * Message ID
             *
             * @description Message ID used for replaying events after a disconnect
             */
            s?: string;
            /**
             * Event name
             *
             * @description Event name for the given message
             */
            t?: string;
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "default",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "content": "Hello **world**!",
         *   "embeds": [
         *     {
         *       "title": "embed title",
         *       "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *       "url": "https://www.guilded.gg",
         *       "color": 6118369,
         *       "timestamp": "2022-04-12T22:14:36.737Z",
         *       "footer": {
         *         "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *         "text": "footer text"
         *       },
         *       "thumbnail": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *       },
         *       "image": {
         *         "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *       },
         *       "author": {
         *         "name": "Gil",
         *         "url": "https://www.guilded.gg",
         *         "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *       },
         *       "fields": [
         *         {
         *           "name": "hello",
         *           "value": "these are fields"
         *         },
         *         {
         *           "name": "~~help i have been crossed out~~",
         *           "value": "~~oh noes~~",
         *           "inline": true
         *         },
         *         {
         *           "name": "another inline",
         *           "value": "field",
         *           "inline": true
         *         }
         *       ]
         *     }
         *   ],
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        ChatMessage: {
            /**
             * Message ID
             * Format: uuid
             *
             * @description The ID of the message
             */
            id: string;
            /**
             * Type
             *
             * @description The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated.
             * @enum {string}
             */
            type: "default" | "system";
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId?: string;
            /**
             * Group ID
             *
             * @description The ID of the group
             */
            groupId?: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the message
             */
            content?: string;
            embeds?: components["schemas"]["ChatEmbed"][];
            /** @description Message IDs that were replied to */
            replyMessageIds?: string[];
            /**
             * Is private
             *
             * @description If set, this message will only be seen by those mentioned or replied to
             */
            isPrivate?: boolean;
            /**
             * Is silent
             *
             * @description If set, this message did not notify mention or reply recipients
             * @default false
             */
            isSilent?: boolean;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the message was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this message (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             *
             * @description The ID of the webhook who created this message, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the message was updated at, if relevant
             */
            updatedAt?: string;
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "messageId": "00000000-0000-0000-0000-000000000000"
         * }
         */
        ChatMessageReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Message ID
             * Format: uuid
             *
             * @description The ID of the message
             */
            messageId: string;
        };
        /**
         * @description Rich content sections optionally associated with chat messages. Properties with "webhook-markdown" support allow for the following: link, italic, bold, strikethrough, underline, inline code, block code, reaction, and mention.
         * @example {
         *   "title": "embed title",
         *   "description": "embeds support a **different** __subset__ *of* markdown than other markdown fields. <@Ann6LewA>\n\n [links](https://www.guilded.gg) ```\ncheck this code out```\n\n:pizza: time!! ttyl",
         *   "url": "https://www.guilded.gg",
         *   "color": 6118369,
         *   "timestamp": "2022-04-12T22:14:36.737Z",
         *   "footer": {
         *     "icon_url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png",
         *     "text": "footer text"
         *   },
         *   "thumbnail": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark/Color/Guilded_Logomark_Color.png"
         *   },
         *   "image": {
         *     "url": "https://www.guilded.gg/asset/Logos/logomark_wordmark/Color/Guilded_Logomark_Wordmark_Color.png"
         *   },
         *   "author": {
         *     "name": "Gil",
         *     "url": "https://www.guilded.gg",
         *     "icon_url": "https://www.guilded.gg/asset/Default/Gil-md.png"
         *   },
         *   "fields": [
         *     {
         *       "name": "hello",
         *       "value": "these are fields"
         *     },
         *     {
         *       "name": "~~help i have been crossed out~~",
         *       "value": "~~oh noes~~",
         *       "inline": true
         *     },
         *     {
         *       "name": "another inline",
         *       "value": "field",
         *       "inline": true
         *     }
         *   ]
         * }
         */
        ChatEmbed: {
            /**
             * Format: webhook-markdown
             *
             * @description Main header of the embed
             */
            title?: string;
            /**
             * Format: webhook-markdown
             *
             * @description Subtext of the embed
             */
            description?: string;
            /**
             * Format: uri
             *
             * @description URL to linkify the `title` field with
             */
            url?: string;
            /** @description Decimal value of the color that the left border should be */
            color?: number;
            /** @description A small section at the bottom of the embed */
            footer?: {
                /**
                 * Format: media-uri
                 *
                 * @description URL of a small image to put in the footer
                 */
                icon_url?: string;
                /** @description Text of the footer */
                text: string;
            };
            /**
             * Format: date-time
             *
             * @description A timestamp to put in the footer
             */
            timestamp?: string;
            /** @description An image to the right of the embed's content */
            thumbnail?: {
                /**
                 * Format: media-uri
                 *
                 * @description URL of the image
                 */
                url?: string;
            };
            /** @description The main picture to associate with the embed */
            image?: {
                /**
                 * Format: media-uri
                 *
                 * @description URL of the image
                 */
                url?: string;
            };
            /** @description A small section above the title of the embed */
            author?: {
                /** @description Name of the author */
                name?: string;
                /**
                 * Format: uri
                 *
                 * @description URL to linkify the author's `name` field
                 */
                url?: string;
                /**
                 * Format: media-uri
                 *
                 * @description URL of a small image to display to the left of the author's `name`
                 */
                icon_url?: string;
            };
            /** @description Table-like cells to add to the embed */
            fields?: {
                /**
                 * Format: webhook-markdown
                 *
                 * @description Header of the table-like cell
                 */
                name: string;
                /**
                 * Format: webhook-markdown
                 *
                 * @description Subtext of the table-like cell
                 */
                value: string;
                /**
                 * @description If the field should wrap or not
                 * @default false
                 */
                inline?: boolean;
            }[];
        };
        /**
         * @example {
         *   "type": "roblox",
         *   "userId": "Ann6LewA",
         *   "handle": "builderman",
         *   "serviceId": "156",
         *   "createdAt": "2006-03-08T20:15:00.706Z"
         * }
         */
        SocialLink: {
            /**
             * Social link type
             *
             * @description The type of social link that Guilded supports. Depending on this value, `handle` or `serviceId` may or may not be present
             * @enum {string}
             */
            type: "bnet" | "epic" | "facebook" | "origin" | "patreon" | "psn" | "roblox" | "steam" | "switch" | "twitch" | "twitter" | "xbox" | "youtube";
            /**
             * User ID
             *
             * @description The ID of the user that the social link is associated with
             */
            userId: string;
            /** @description The handle of the user within the external service */
            handle?: string;
            /** @description The unique ID that represents this member's social link within the external service */
            serviceId?: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the social link was created at
             */
            createdAt: string;
        };
        /**
         * @description Metadata of who or what is mentioned in content
         * @example {
         *   "users": [
         *     {
         *       "id": "Ann6LewA"
         *     }
         *   ],
         *   "channels": [
         *     {
         *       "id": "00000000-0000-0000-0000-000000000000"
         *     }
         *   ],
         *   "roles": [
         *     {
         *       "id": 591232
         *     }
         *   ],
         *   "everyone": true,
         *   "here": true
         * }
         */
        Mentions: {
            /**
             * Users
             *
             * @description Info on mentioned users
             */
            users?: {
                /**
                 * User ID
                 *
                 * @description The ID of the user
                 */
                id: string;
            }[];
            /**
             * Channels
             *
             * @description Info on mentioned channels
             */
            channels?: {
                /**
                 * Channel ID
                 * Format: uuid
                 *
                 * @description The ID of the channel
                 */
                id: string;
            }[];
            /**
             * Roles
             *
             * @description Info on mentioned roles
             */
            roles?: {
                /**
                 * Role ID
                 *
                 * @description The ID of the role
                 */
                id: number;
            }[];
            /**
             * Everyone
             *
             * @description If @everyone was mentioned
             */
            everyone?: boolean;
            /**
             * Here
             *
             * @description If @here was mentioned
             */
            here?: boolean;
        };
        /**
         * @example {
         *   "id": 1234567890,
         *   "content": "Great idea!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "forumTopicId": 2036274747,
         *   "createdBy": "Ann6LewA"
         * }
         */
        ForumTopicComment: {
            /** @description The ID of the forum topic comment */
            id: number;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the forum topic comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic comment was created at
             */
            createdAt: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic comment was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /** @description The ID of the forum topic */
            forumTopicId: number;
            /**
             * Created by
             *
             * @description The ID of the user who created this forum topic comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            mentions?: components["schemas"]["Mentions"];
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456
         * }
         */
        ForumTopicReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic */
            forumTopicId: number;
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "forumTopicId": 123456,
         *   "forumTopicCommentId": 1234567890
         * }
         */
        ForumTopicCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /** @description The ID of the forum topic */
            forumTopicId: number;
            /** @description The ID of the forum topic comment */
            forumTopicCommentId: number;
        };
        /**
         * @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "content": "Please introduce yourself in this topic!!!"
         * }
         */
        ForumTopic: {
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Title
             *
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Bumped at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Is pinned
             *
             * @default false
             */
            isPinned?: boolean;
            /**
             * Is locked
             *
             * @default false
             */
            isLocked?: boolean;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the forum topic
             */
            content: string;
            mentions?: components["schemas"]["Mentions"];
        };
        /**
         * @example {
         *   "id": 123456,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "Welcome new members!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        ForumTopicSummary: {
            /** @description The ID of the forum topic */
            id: number;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Title
             *
             * @description The title of the forum topic
             */
            title: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this forum topic (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Bumped at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the forum topic was bumped at. This timestamp is updated whenever there is any activity on the posts within the forum topic.
             */
            bumpedAt?: string;
            /**
             * Is pinned
             *
             * @default false
             */
            isPinned?: boolean;
            /**
             * Is locked
             *
             * @default false
             */
            isLocked?: boolean;
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA",
         *     "content": "Duly noted"
         *   }
         * }
         */
        ListItem: {
            /**
             * Format: uuid
             *
             * @description The ID of the list item
             */
            id: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Message
             * Format: markdown
             *
             * @description The message of the list item
             */
            message: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             *
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             *
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
            /**
             * Format: uuid
             *
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Completed at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             *
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            note?: {
                /**
                 * Created at
                 * Format: date-time
                 *
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 *
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                /**
                 * Updated at
                 * Format: date-time
                 *
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 *
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
                mentions?: components["schemas"]["Mentions"];
                /**
                 * Note
                 * Format: markdown
                 *
                 * @description The note of the list item
                 */
                content: string;
            };
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "message": "Remember to say hello **world**!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "note": {
         *     "createdAt": "2021-06-15T20:15:00.706Z",
         *     "createdBy": "Ann6LewA"
         *   }
         * }
         */
        ListItemSummary: {
            /**
             * Format: uuid
             *
             * @description The ID of the list item
             */
            id: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Message
             * Format: markdown
             *
             * @description The message of the list item
             */
            message: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this list item (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Created by Webhook ID
             *
             * @description The ID of the webhook who created this list item, if it was created by a webhook
             */
            createdByWebhookId?: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             *
             * @description The ID of the user who updated this list item
             */
            updatedBy?: string;
            /**
             * Format: uuid
             *
             * @description The ID of the parent list item if this list item is nested
             */
            parentListItemId?: string;
            /**
             * Completed at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the list item was completed at
             */
            completedAt?: string;
            /**
             * Completed by
             *
             * @description The ID of the user who completed this list item
             */
            completedBy?: string;
            note?: {
                /**
                 * Created at
                 * Format: date-time
                 *
                 * @description The ISO 8601 timestamp that the note was created at. If this field is populated, then there's a note associated with the list item
                 */
                createdAt: string;
                /**
                 * Created by
                 *
                 * @description The ID of the user who created this note
                 */
                createdBy: string;
                /**
                 * Updated at
                 * Format: date-time
                 *
                 * @description The ISO 8601 timestamp that the note was updated at, if relevant
                 */
                updatedAt?: string;
                /**
                 * Updated by
                 *
                 * @description The ID of the user who updated this note
                 */
                updatedBy?: string;
            };
        };
        /**
         * @example {
         *   "id": 0,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "title": "HOW-TO: Smoke These Meats with Sweet Baby Ray's",
         *   "content": "Spicy jalapeno bacon ipsum dolor amet sirloin ground round short loin, meatball brisket capicola tri-tip ham pork belly biltong corned beef chuck. Chicken ham brisket shank rump buffalo t-bone. Short loin sausage buffalo porchetta pork belly rump tri-tip frankfurter tail pork chop cow sirloin. Pancetta porchetta tail ball tip chislic beef ribs. Buffalo andouille leberkas jerky. Fatback shankle andouille beef. Cow kielbasa buffalo pork loin chislic meatloaf short loin rump meatball prosciutto.",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "updatedAt": "2021-07-15T22:20:00.706Z",
         *   "updatedBy": "Ann6LewA"
         * }
         */
        Doc: {
            /**
             * Doc ID
             *
             * @description The ID of the doc
             */
            id: number;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Title
             *
             * @description The title of the doc
             */
            title: string;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the doc
             */
            content: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the doc was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this doc
             */
            createdBy: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the doc was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Updated by
             *
             * @description The ID of the user who updated this doc
             */
            updatedBy?: string;
        };
        /**
         * @example {
         *   "id": 123456,
         *   "content": "Wow, cool document!!!",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "docId": 0,
         *   "createdBy": "Ann6LewA"
         * }
         */
        DocComment: {
            /**
             * Doc comment ID
             *
             * @description The ID of the doc comment
             */
            id: number;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the doc comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the doc comment was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this doc comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the doc comment was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Doc ID
             *
             * @description The ID of the doc
             */
            docId: number;
            mentions?: components["schemas"]["Mentions"];
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0
         * }
         */
        DocReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Doc ID
             *
             * @description The ID of the doc
             */
            docId: number;
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "docId": 0,
         *   "docCommentId": 123456
         * }
         */
        DocCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Doc ID
             *
             * @description The ID of the doc
             */
            docId: number;
            /**
             * Doc comment ID
             *
             * @description The ID of the doc comment
             */
            docCommentId: number;
        };
        /**
         * @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch",
         *     "createdAt": "2021-06-15T20:15:00.706Z"
         *   },
         *   "roleIds": [],
         *   "nickname": "Professor Chaos",
         *   "joinedAt": "2021-07-15T20:15:00.706Z"
         * }
         */
        ServerMember: {
            user: components["schemas"]["User"];
            /** Role IDs */
            roleIds: number[];
            /** Nickname */
            nickname?: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the member was created at
             */
            joinedAt: string;
            /**
             * Is owner
             *
             * @default false
             */
            isOwner?: boolean;
        };
        /**
         * @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "roleIds": []
         * }
         */
        ServerMemberSummary: {
            user: components["schemas"]["UserSummary"];
            /** Role IDs */
            roleIds: number[];
        };
        /**
         * @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch",
         *   "createdAt": "2021-06-15T20:15:00.706Z"
         * }
         */
        User: {
            /**
             * User ID
             *
             * @description The ID of the user
             */
            id: string;
            /**
             * User type
             *
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
            /**
             * User name
             *
             * @description The user's name
             */
            name: string;
            /**
             * Avatar
             * Format: media-uri
             *
             * @description The avatar image associated with the user
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             *
             * @description The banner image associated with the user
             */
            banner?: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the user was created at
             */
            createdAt: string;
        };
        /**
         * @example {
         *   "id": "Ann6LewA",
         *   "type": "user",
         *   "name": "Leopold Stotch"
         * }
         */
        UserSummary: {
            /**
             * User ID
             *
             * @description The ID of the user
             */
            id: string;
            /**
             * User type
             *
             * @description The type of user. If this property is absent, it can assumed to be of type `user`
             * @enum {string}
             */
            type?: "bot" | "user";
            /**
             * User name
             *
             * @description The user's name
             */
            name: string;
            /**
             * Avatar
             * Format: media-uri
             *
             * @description The avatar image associated with the user
             */
            avatar?: string;
        };
        /**
         * @example {
         *   "user": {
         *     "id": "Ann6LewA",
         *     "type": "user",
         *     "name": "Leopold Stotch"
         *   },
         *   "reason": "More toxic than a poison Pokémon",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        ServerMemberBan: {
            user: components["schemas"]["UserSummary"];
            /**
             * Reason
             *
             * @description The reason for the ban as submitted by the banner
             */
            reason?: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this server member ban
             */
            createdBy: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the server member ban was created at
             */
            createdAt: string;
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "type": "chat",
         *   "name": "The Dank Cellar",
         *   "topic": "Dank memes ONLY",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "serverId": "wlVr3Ggl",
         *   "groupId": "ZVzBo83p"
         * }
         */
        ServerChannel: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            id: string;
            /**
             * @description The type of channel. This will determine what routes to use for creating content in a channel. For example, if this "chat", then one must use the routes for creating channel messages
             * @enum {string}
             */
            type: "announcements" | "calendar" | "chat" | "docs" | "forums" | "list" | "media" | "scheduling" | "stream" | "voice";
            /** @description The name of the channel */
            name: string;
            /** @description The topic of the channel */
            topic?: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the channel was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this channel
             */
            createdBy: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the channel was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description ID of the parent channel or parent thread, if present. Only relevant for server channels
             */
            parentId?: string;
            /** @description Only relevant for server channels */
            categoryId?: number;
            /**
             * Group ID
             *
             * @description The ID of the group
             */
            groupId: string;
            /**
             * Is public
             *
             * @description Whether the channel can be accessed from users who are not member of the server
             * @default false
             */
            isPublic?: boolean;
            /**
             * Archived by
             *
             * @description The ID of the user who archived this channel
             */
            archivedBy?: string;
            /**
             * Archived at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the channel was archived at, if relevant
             */
            archivedAt?: string;
        };
        /**
         * @example {
         *   "id": "wlVr3Ggl",
         *   "type": "community",
         *   "name": "Guilded",
         *   "url": "Guilded-Official",
         *   "about": "The Official Guilded Server! For devs, friends, and fans alike!",
         *   "ownerId": "Ann6LewA",
         *   "createdAt": "2018-10-05T20:15:00.706Z",
         *   "isVerified": true,
         *   "timezone": "America/Los Angeles (PST/PDT)"
         * }
         */
        Server: {
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            id: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this server
             */
            ownerId: string;
            /**
             * Server type
             *
             * @description The type of server designated from the server's settings page
             * @enum {string}
             */
            type?: "clan" | "community" | "friends" | "guild" | "organization" | "other" | "streaming" | "team";
            /**
             * Server name
             *
             * @description The name given to the server
             */
            name: string;
            /**
             * Server URL
             *
             * @description The URL that the server can be accessible from. For example, a value of "Guilded-Official" means the server can be accessible from https://www.guilded.gg/Guilded-Official
             */
            url?: string;
            /**
             * Description
             *
             * @description The description associated with the server
             */
            about?: string;
            /**
             * Avatar
             * Format: media-uri
             *
             * @description The avatar image associated with the server
             */
            avatar?: string;
            /**
             * Banner
             * Format: media-uri
             *
             * @description The banner image associated with the server
             */
            banner?: string;
            /**
             * Timezone
             *
             * @description The timezone associated with the server
             */
            timezone?: string;
            /**
             * Is verified
             *
             * @description The verified status of the server
             */
            isVerified?: boolean;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The channel ID of the default channel of the server. This channel is defined as the first chat or voice channel in the left sidebar of a server in our UI. This channel is useful for sending welcome messages, though note that a bot may not have permissions to interact with this channel depending on how the server is configured.
             */
            defaultChannelId?: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the server was created at
             */
            createdAt: string;
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "E-102 Gamma",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        Webhook: {
            /**
             * Webhook ID
             * Format: uuid
             *
             * @description The ID of the webhook
             */
            id: string;
            /**
             * Name
             *
             * @description The name of the webhook
             */
            name: string;
            /**
             * Avatar
             * Format: media-uri
             *
             * @description The avatar image associated with the webhook
             */
            avatar?: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the webhook was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this webhook
             */
            createdBy: string;
            /**
             * Deleted at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the webhook was deleted at
             */
            deletedAt?: string;
            /**
             * Token
             *
             * @description The token of the webhook
             */
            token?: string;
        };
        /**
         * @example {
         *   "id": 1,
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "name": "Surprise LAN party for my wife 🤫",
         *   "description": "**Don't say anything to her!** She's gonna love playing Call of Duty all night",
         *   "location": "My house!",
         *   "url": "https://www.surprisepartygame.com/",
         *   "duration": 60,
         *   "color": 16106496,
         *   "startsAt": "2022-06-16T00:00:00.000Z",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        CalendarEvent: {
            /**
             * Calendar event ID
             *
             * @description The ID of the calendar event
             */
            id: number;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Name
             *
             * @description The name of the event
             */
            name: string;
            /**
             * Description
             * Format: markdown
             *
             * @description The description of the event
             */
            description?: string;
            /**
             * Location
             *
             * @description The location of the event
             */
            location?: string;
            /**
             * Format: uri
             *
             * @description A URL to associate with the event
             */
            url?: string;
            /** @description The color of the event when viewing in the calendar */
            color?: number;
            /** @description Is this event a repeating event */
            repeats?: boolean;
            /**
             * Calendar event series ID
             * Format: uuid
             *
             * @description The ID of the calendar event series. Only shows if the event is repeating
             */
            seriesId?: string;
            /**
             * Role IDs
             *
             * @description The role IDs to restrict the event to
             */
            roleIds?: number[];
            /**
             * RSVP disabled
             *
             * @description When disabled, users will not be able to RSVP to the event
             */
            rsvpDisabled?: boolean;
            /**
             * Is all day
             *
             * @description Does the event last all day
             */
            isAllDay?: boolean;
            /** @description The number of RSVPs to allow before waitlisting RSVPs */
            rsvpLimit?: number;
            /** @description When `rsvpLimit` is set, users from the waitlist will be added as space becomes available in the event */
            autofillWaitlist?: boolean;
            /**
             * Starts at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the event starts at
             */
            startsAt: string;
            /**
             * Duration
             *
             * @description The duration of the event _**in minutes**_
             */
            duration?: number;
            /** Is private */
            isPrivate?: boolean;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the event was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this event
             */
            createdBy: string;
            cancellation?: {
                /**
                 * Description
                 * Format: markdown
                 *
                 * @description The description of event cancellation
                 */
                description?: string;
                /**
                 * Created by
                 *
                 * @description The ID of the user who created this event cancellation
                 */
                createdBy: string;
            };
        };
        /**
         * @example {
         *   "id": 90000000,
         *   "name": "grinning",
         *   "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         * }
         */
        Emote: {
            /**
             * Emote ID
             *
             * @description The ID of the emote
             */
            id: number;
            /**
             * Name
             *
             * @description The name of the emote
             */
            name: string;
            /**
             * Emote URL
             * Format: media-uri
             *
             * @description The URL of the emote image
             */
            url: string;
            /**
             * Server ID
             *
             * @description The ID of the server the emote was created on
             */
            serverId?: string;
        };
        /**
         * @example {
         *   "calendarEventId": 1,
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "userId": "Ann6LewA",
         *   "status": "going",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA"
         * }
         */
        CalendarEventRsvp: {
            /**
             * Calendar event ID
             *
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * User ID
             *
             * @description The ID of the user
             */
            userId: string;
            /**
             * Status
             *
             * @description The status of the RSVP
             * @enum {string}
             */
            status: "declined" | "going" | "invited" | "maybe" | "not responded" | "waitlisted";
            /**
             * Created by
             *
             * @description The ID of the user who created this RSVP
             */
            createdBy: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the RSVP was created at
             */
            createdAt: string;
            /**
             * Updated by
             *
             * @description The ID of the user who updated this RSVP
             */
            updatedBy?: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the RSVP was updated at, if relevant
             */
            updatedAt?: string;
        };
        /**
         * @example {
         *   "id": 1234567890,
         *   "content": "I will be there!!",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2022-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "calendarEventId": 987654321
         * }
         */
        CalendarEventComment: {
            /**
             * Calendar event comment ID
             *
             * @description The ID of the calendar event comment
             */
            id: number;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the calendar event comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the calendar event comment was created at
             */
            createdAt: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the calendar event comment was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Calendar event ID
             *
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this calendar event comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            mentions?: components["schemas"]["Mentions"];
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1
         * }
         */
        CalendarEventReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Calendar event ID
             *
             * @description The ID of the calendar event
             */
            calendarEventId: number;
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "calendarEventId": 1,
         *   "calendarEventCommentId": 1234567890
         * }
         */
        CalendarEventCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Calendar event ID
             *
             * @description The ID of the calendar event
             */
            calendarEventId: number;
            /**
             * Calendar event comment ID
             *
             * @description The ID of the calendar event comment
             */
            calendarEventCommentId: number;
        };
        /**
         * @example {
         *   "id": "00000000-0000-0000-0000-000000000000",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000"
         * }
         */
        CalendarEventSeries: {
            /**
             * Calendar event series ID
             * Format: uuid
             *
             * @description The ID of the calendar event series
             */
            id: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
        };
        /**
         * @example {
         *   "id": "9RVMoDZy",
         *   "serverId": "wlVr3Ggl",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdAt": "2021-06-15T20:15:00.706Z",
         *   "createdBy": "Ann6LewA",
         *   "title": "Pizza Party, don't be tardy!",
         *   "content": "Grab a slice, don't be slow, At our pizza party, it's the way to go! Toppings galore, cheesy delight, Come join us, it'll be out of sight!"
         * }
         */
        Announcement: {
            /**
             * Announcement ID
             *
             * @description The ID of the announcement
             */
            id: string;
            /**
             * Server ID
             *
             * @description The ID of the server
             */
            serverId: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the announcement was created at
             */
            createdAt: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this announcement
             */
            createdBy: string;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the announcement
             */
            content: string;
            mentions?: components["schemas"]["Mentions"];
            /**
             * Title
             *
             * @description The title of the announcement
             */
            title: string;
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy"
         * }
         */
        AnnouncementReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Announcement ID
             *
             * @description The ID of the announcement
             */
            announcementId: string;
        };
        /**
         * @example {
         *   "id": 123456,
         *   "content": "Now THAT is one awesome announcement!!!",
         *   "createdAt": "2023-04-07T16:19:00.000Z",
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "announcementId": "9RVMoDZy",
         *   "createdBy": "Ann6LewA"
         * }
         */
        AnnouncementComment: {
            /**
             * Announcement comment ID
             *
             * @description The ID of the announcement comment
             */
            id: number;
            /**
             * Content
             * Format: markdown
             *
             * @description The content of the announcement comment
             */
            content: string;
            /**
             * Created at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the announcement comment was created at
             */
            createdAt: string;
            /**
             * Updated at
             * Format: date-time
             *
             * @description The ISO 8601 timestamp that the announcement comment was updated at, if relevant
             */
            updatedAt?: string;
            /**
             * Created by
             *
             * @description The ID of the user who created this announcement comment (Note: If this event has `createdByWebhookId` present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA)
             */
            createdBy: string;
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * Announcement ID
             *
             * @description The ID of the announcement
             */
            announcementId: string;
            mentions?: components["schemas"]["Mentions"];
        };
        /**
         * @example {
         *   "channelId": "00000000-0000-0000-0000-000000000000",
         *   "createdBy": "Ann6LewA",
         *   "emote": {
         *     "id": 90000000,
         *     "name": "grinning",
         *     "url": "https://img.guildedcdn.com/asset/Emojis/grinning.webp"
         *   },
         *   "announcementId": "9RVMoDZy",
         *   "announcementCommentId": 123456
         * }
         */
        AnnouncementCommentReaction: {
            /**
             * Channel ID
             * Format: uuid
             *
             * @description The ID of the channel
             */
            channelId: string;
            /**
             * User ID
             *
             * @description The ID of the user who added the reaction
             */
            createdBy: string;
            emote: components["schemas"]["Emote"];
            /**
             * Announcement ID
             *
             * @description The ID of the announcement
             */
            announcementId: string;
            /**
             * Announcement comment ID
             *
             * @description The ID of the announcement comment
             */
            announcementCommentId: number;
        };
    };
    responses: {
        _WelcomeMessage: {
            content: {
                "application/json": {
                    /** @description The interval in milliseconds that your bot should be configured to send ping frames for the bot's [heartbeat](/docs/api/heartbeat) to be considered valid. */
                    heartbeatIntervalMs: number;
                    /** @description The last message's ID that was sent to this bot. See [event replay](/docs/api/replay) for more details */
                    lastMessageId: string;
                    /**
                     * Bot ID
                     * Format: uuid
                     *
                     * @description The ID of the bot
                     */
                    botId: string;
                    user: components["schemas"]["User"];
                };
            };
        };
        /** @description Emitted when a bot is added to a server */
        BotServerMembershipCreated: {
            content: {
                "application/json": {
                    server: components["schemas"]["Server"];
                    /**
                     * Created by
                     *
                     * @description The ID of the user who created this server membership
                     */
                    createdBy: string;
                };
            };
        };
        /** @description Emitted when a bot is removed from a server */
        BotServerMembershipDeleted: {
            content: {
                "application/json": {
                    server: components["schemas"]["Server"];
                    /**
                     * Deleted by
                     *
                     * @description The ID of the user who deleted this server membership
                     */
                    deletedBy: string;
                };
            };
        };
        ChatMessageCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    message: components["schemas"]["ChatMessage"];
                };
            };
        };
        ChatMessageUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    message: components["schemas"]["ChatMessage"];
                };
            };
        };
        ChatMessageDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    message: {
                        /**
                         * Message ID
                         * Format: uuid
                         *
                         * @description The ID of the message
                         */
                        id: string;
                        /**
                         * Server ID
                         *
                         * @description The ID of the server
                         */
                        serverId?: string;
                        /**
                         * Channel ID
                         * Format: uuid
                         *
                         * @description The ID of the channel
                         */
                        channelId: string;
                        /**
                         * Deleted at
                         * Format: date-time
                         *
                         * @description The ISO 8601 timestamp that the message was deleted at
                         */
                        deletedAt: string;
                        /** Is private */
                        isPrivate?: boolean;
                    };
                };
            };
        };
        ServerMemberJoined: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    member: components["schemas"]["ServerMember"];
                };
            };
        };
        ServerMemberRemoved: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    /**
                     * User ID
                     *
                     * @description The ID of the user
                     */
                    userId: string;
                    /**
                     * Is kick?
                     *
                     * @description If this member leaving was the result of a kick
                     */
                    isKick?: boolean;
                    /**
                     * Is ban?
                     *
                     * @description If this member leaving was the result of a ban
                     */
                    isBan?: boolean;
                };
            };
        };
        ServerMemberBanned: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    serverMemberBan: components["schemas"]["ServerMemberBan"];
                };
            };
        };
        ServerMemberUnbanned: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    serverMemberBan: components["schemas"]["ServerMemberBan"];
                };
            };
        };
        ServerMemberUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    userInfo: {
                        /**
                         * User ID
                         *
                         * @description The ID of the user
                         */
                        id: string;
                        /**
                         * Nickname
                         *
                         * @description The nickname that was just updated for the user
                         */
                        nickname?: string | null;
                    };
                };
            };
        };
        ServerRolesUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    memberRoleIds: {
                        /**
                         * User ID
                         *
                         * @description The ID of the member that had roles updated
                         */
                        userId: string;
                        /**
                         * Role IDs
                         *
                         * @description The IDs of the roles that the member currently has _after_ this operation
                         */
                        roleIds: number[];
                    }[];
                };
            };
        };
        ServerChannelCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    channel: components["schemas"]["ServerChannel"];
                };
            };
        };
        ServerChannelUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    channel: components["schemas"]["ServerChannel"];
                };
            };
        };
        ServerChannelDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    channel: components["schemas"]["ServerChannel"];
                };
            };
        };
        ServerMemberSocialLinkCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerMemberSocialLinkUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerMemberSocialLinkDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    socialLink: components["schemas"]["SocialLink"];
                };
            };
        };
        ServerWebhookCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    webhook: components["schemas"]["Webhook"];
                };
            };
        };
        ServerWebhookUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    webhook: components["schemas"]["Webhook"];
                };
            };
        };
        DocCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    doc: components["schemas"]["Doc"];
                };
            };
        };
        DocUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    doc: components["schemas"]["Doc"];
                };
            };
        };
        DocDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    doc: components["schemas"]["Doc"];
                };
            };
        };
        DocCommentCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    docComment: components["schemas"]["DocComment"];
                };
            };
        };
        DocCommentDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    docComment: components["schemas"]["DocComment"];
                };
            };
        };
        DocCommentUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    docComment: components["schemas"]["DocComment"];
                };
            };
        };
        CalendarEventCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEvent: components["schemas"]["CalendarEvent"];
                };
            };
        };
        CalendarEventUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEvent: components["schemas"]["CalendarEvent"];
                };
            };
        };
        CalendarEventDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEvent: components["schemas"]["CalendarEvent"];
                };
            };
        };
        ForumTopicCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicPinned: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicUnpinned: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["ForumTopicReaction"];
                };
            };
        };
        ForumTopicReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["ForumTopicReaction"];
                };
            };
        };
        ForumTopicLocked: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicUnlocked: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopic: components["schemas"]["ForumTopic"];
                };
            };
        };
        ForumTopicCommentCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                };
            };
        };
        ForumTopicCommentUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                };
            };
        };
        ForumTopicCommentDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    forumTopicComment: components["schemas"]["ForumTopicComment"];
                };
            };
        };
        CalendarEventRsvpUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                };
            };
        };
        CalendarEventRsvpManyUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventRsvps: components["schemas"]["CalendarEventRsvp"][];
                };
            };
        };
        CalendarEventRsvpDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventRsvp: components["schemas"]["CalendarEventRsvp"];
                };
            };
        };
        ListItemCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    listItem: components["schemas"]["ListItem"];
                };
            };
        };
        ListItemUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    listItem: components["schemas"]["ListItem"];
                };
            };
        };
        ListItemDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    listItem: components["schemas"]["ListItem"];
                };
            };
        };
        ListItemCompleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    listItem: components["schemas"]["ListItem"];
                };
            };
        };
        ListItemUncompleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    listItem: components["schemas"]["ListItem"];
                };
            };
        };
        ChannelMessageReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["ChatMessageReaction"];
                };
            };
        };
        ChannelMessageReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    /**
                     * Deleted by
                     *
                     * @description The ID of the user who deleted this reaction
                     */
                    deletedBy: string;
                    reaction: components["schemas"]["ChatMessageReaction"];
                };
            };
        };
        ChannelMessageReactionManyDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    /**
                     * Channel ID
                     * Format: uuid
                     *
                     * @description The ID of the channel
                     */
                    channelId: string;
                    /**
                     * Message ID
                     * Format: uuid
                     *
                     * @description The ID of the message
                     */
                    messageId: string;
                    /**
                     * Deleted by
                     *
                     * @description The ID of the user who deleted this reaction
                     */
                    deletedBy: string;
                    /** @description The count of reactions that were removed */
                    count: number;
                    /** @description If present, only reactions of this emote were bulk removed from the message */
                    emote?: components["schemas"]["Emote"];
                };
            };
        };
        ForumTopicCommentReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["ForumTopicCommentReaction"];
                };
            };
        };
        ForumTopicCommentReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["ForumTopicCommentReaction"];
                };
            };
        };
        CalendarEventCommentCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                };
            };
        };
        CalendarEventCommentDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                };
            };
        };
        CalendarEventCommentUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventComment: components["schemas"]["CalendarEventComment"];
                };
            };
        };
        CalendarEventReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["CalendarEventReaction"];
                };
            };
        };
        CalendarEventReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["CalendarEventReaction"];
                };
            };
        };
        CalendarEventCommentReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["CalendarEventCommentReaction"];
                };
            };
        };
        CalendarEventCommentReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["CalendarEventCommentReaction"];
                };
            };
        };
        DocReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["DocReaction"];
                };
            };
        };
        DocReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["DocReaction"];
                };
            };
        };
        DocCommentReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["DocCommentReaction"];
                };
            };
        };
        DocCommentReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["DocCommentReaction"];
                };
            };
        };
        CalendarEventSeriesUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventSeries: components["schemas"]["CalendarEventSeries"];
                    /**
                     * Calendar event ID
                     *
                     * @description The calendar event updates started at
                     */
                    calendarEventId?: number;
                };
            };
        };
        CalendarEventSeriesDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    calendarEventSeries: components["schemas"]["CalendarEventSeries"];
                    /**
                     * Calendar event ID
                     *
                     * @description The calendar event deletions started at
                     */
                    calendarEventId?: number;
                };
            };
        };
        AnnouncementCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcement: components["schemas"]["Announcement"];
                };
            };
        };
        AnnouncementUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcement: components["schemas"]["Announcement"];
                };
            };
        };
        AnnouncementDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcement: components["schemas"]["Announcement"];
                };
            };
        };
        AnnouncementReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["AnnouncementReaction"];
                };
            };
        };
        AnnouncementReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["AnnouncementReaction"];
                };
            };
        };
        AnnouncementCommentCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcementComment: components["schemas"]["AnnouncementComment"];
                };
            };
        };
        AnnouncementCommentUpdated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcementComment: components["schemas"]["AnnouncementComment"];
                };
            };
        };
        AnnouncementCommentDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    announcementComment: components["schemas"]["AnnouncementComment"];
                };
            };
        };
        AnnouncementCommentReactionCreated: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["AnnouncementCommentReaction"];
                };
            };
        };
        AnnouncementCommentReactionDeleted: {
            content: {
                "application/json": {
                    /**
                     * Server ID
                     *
                     * @description The ID of the server
                     */
                    serverId: string;
                    reaction: components["schemas"]["AnnouncementCommentReaction"];
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type external = Record<string, never>;
export type operations = Record<string, never>;
//# sourceMappingURL=ws.d.ts.map