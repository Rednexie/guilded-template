import type { ForumTopic } from "../models/ForumTopic";
import type { ForumTopicSummary } from "../models/ForumTopicSummary";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class ForumsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a topic in a forum
     * @returns any Success
     * @throws ApiError
     */
    forumTopicCreate({ channelId, requestBody, }: {
        channelId: string;
        requestBody: {
            /**
             * The title of the forum topic
             */
            title: string;
            /**
             * The content of the forum topic
             */
            content: Record<string, any> | string;
        };
    }): CancelablePromise<{
        forumTopic: ForumTopic;
    }>;
    /**
     * Get forum topics
     * @returns any Success
     * @throws ApiError
     */
    forumTopicReadMany({ channelId, before, limit }: {
        channelId: string;
        before?: string;
        limit?: number;
    }): CancelablePromise<{
        forumTopics: Array<ForumTopicSummary>;
    }>;
    /**
     * Get a forum topic
     * @returns any Success
     * @throws ApiError
     */
    forumTopicRead({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<{
        forumTopic: ForumTopic;
    }>;
    /**
     * Update a forum topic
     * @returns any Success
     * @throws ApiError
     */
    forumTopicUpdate({ channelId, forumTopicId, requestBody, }: {
        channelId: string;
        forumTopicId: number;
        requestBody: {
            /**
             * The title of the forum topic
             */
            title?: string;
            /**
             * The content of the forum topic
             */
            content?: string;
        };
    }): CancelablePromise<{
        forumTopic: ForumTopic;
    }>;
    /**
     * Delete a forum topic
     * @returns void
     * @throws ApiError
     */
    forumTopicDelete({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<void>;
    /**
     * Pin a forum topic
     * @returns void
     * @throws ApiError
     */
    forumTopicPin({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<void>;
    /**
     * Unpin a forum topic
     * @returns void
     * @throws ApiError
     */
    forumTopicUnpin({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<void>;
    /**
     * Lock a forum topic
     * @returns void
     * @throws ApiError
     */
    forumTopicLock({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<void>;
    /**
     * Unlock a forum topic
     * @returns void
     * @throws ApiError
     */
    forumTopicUnlock({ channelId, forumTopicId }: {
        channelId: string;
        forumTopicId: number;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=ForumsService.d.ts.map