import type { CalendarEventComment } from "../models/CalendarEventComment";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class CalendarEventCommentsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a comment on an event
     * @returns any Success
     * @throws ApiError
     */
    calendarEventCommentCreate({ channelId, calendarEventId, requestBody, }: {
        channelId: string;
        calendarEventId: number;
        requestBody: {
            /**
             * The content of the calendar event comment
             */
            content: string;
        };
    }): CancelablePromise<{
        calendarEventComment: CalendarEventComment;
    }>;
    /**
     * Get a calendar event's comments
     * @returns any Success
     * @throws ApiError
     */
    calendarEventCommentReadMany({ channelId, calendarEventId }: {
        channelId: string;
        calendarEventId: number;
    }): CancelablePromise<{
        calendarEventComments: Array<CalendarEventComment>;
    }>;
    /**
     * Get a comment on the calendar event
     * @returns any Success
     * @throws ApiError
     */
    calendarEventCommentRead({ channelId, calendarEventId, calendarEventCommentId }: {
        channelId: string;
        calendarEventId: number;
        calendarEventCommentId: number;
    }): CancelablePromise<{
        calendarEventComment: CalendarEventComment;
    }>;
    /**
     * Update a calendar event comment
     * @returns any Success
     * @throws ApiError
     */
    calendarEventCommentUpdate({ channelId, calendarEventId, calendarEventCommentId, requestBody, }: {
        channelId: string;
        calendarEventId: number;
        calendarEventCommentId: number;
        requestBody: {
            /**
             * The content of the calendar event comment
             */
            content: string;
        };
    }): CancelablePromise<{
        calendarEventComment: CalendarEventComment;
    }>;
    /**
     * Delete a calendar event comment
     * @returns void
     * @throws ApiError
     */
    calendarEventCommentDelete({ channelId, calendarEventId, calendarEventCommentId }: {
        channelId: string;
        calendarEventId: number;
        calendarEventCommentId: number;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=CalendarEventCommentsService.d.ts.map