import type { AnnouncementComment } from "../models/AnnouncementComment";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class AnnouncementCommentsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a comment on an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementCommentCreate({ channelId, announcementId, requestBody, }: {
        channelId: string;
        announcementId: string;
        requestBody: {
            /**
             * The content of the announcement comment
             */
            content: string;
        };
    }): CancelablePromise<{
        announcementComment: AnnouncementComment;
    }>;
    /**
     * Get an announcement's comments
     * @returns any Success
     * @throws ApiError
     */
    announcementCommentReadMany({ channelId, announcementId }: {
        channelId: string;
        announcementId: string;
    }): CancelablePromise<{
        announcementComments: Array<AnnouncementComment>;
    }>;
    /**
     * Get a comment on the announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementCommentRead({ channelId, announcementId, announcementCommentId }: {
        channelId: string;
        announcementId: string;
        announcementCommentId: number;
    }): CancelablePromise<{
        announcementComment: AnnouncementComment;
    }>;
    /**
     * Update an announcement comment
     * @returns any Success
     * @throws ApiError
     */
    announcementCommentUpdate({ channelId, announcementId, announcementCommentId, requestBody, }: {
        channelId: string;
        announcementId: string;
        announcementCommentId: number;
        requestBody: {
            /**
             * The content of the announcement comment
             */
            content: string;
        };
    }): CancelablePromise<{
        announcementComment: AnnouncementComment;
    }>;
    /**
     * Delete an announcement comment
     * @returns void
     * @throws ApiError
     */
    announcementCommentDelete({ channelId, announcementId, announcementCommentId }: {
        channelId: string;
        announcementId: string;
        announcementCommentId: number;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=AnnouncementCommentsService.d.ts.map