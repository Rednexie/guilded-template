import type { Doc } from "../models/Doc";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class DocsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a doc
     * @returns any Success
     * @throws ApiError
     */
    docCreate({ channelId, requestBody, }: {
        channelId: string;
        requestBody: {
            /**
             * The title of the doc
             */
            title: string;
            /**
             * The content of the doc
             */
            content: Record<string, any> | string;
        };
    }): CancelablePromise<{
        doc: Doc;
    }>;
    /**
     * Get docs
     * Results returned will be ordered descending by the doc's `updatedAt`. `before` will filter based on the doc's `updatedAt`
     * @returns any Success
     * @throws ApiError
     */
    docReadMany({ channelId, before, limit }: {
        channelId: string;
        before?: string;
        limit?: number;
    }): CancelablePromise<{
        docs: Array<Doc>;
    }>;
    /**
     * Get a doc
     * @returns any Success
     * @throws ApiError
     */
    docRead({ channelId, docId }: {
        channelId: string;
        docId: number;
    }): CancelablePromise<{
        doc: Doc;
    }>;
    /**
     * Update a doc
     * @returns any Success
     * @throws ApiError
     */
    docUpdate({ channelId, docId, requestBody, }: {
        channelId: string;
        docId: number;
        requestBody: {
            /**
             * The title of the doc
             */
            title: string;
            /**
             * The content of the doc
             */
            content: string;
        };
    }): CancelablePromise<{
        doc: Doc;
    }>;
    /**
     * Delete a doc
     * @returns void
     * @throws ApiError
     */
    docDelete({ channelId, docId }: {
        channelId: string;
        docId: number;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=DocsService.d.ts.map