import type { Webhook } from "../models/Webhook";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class WebhookService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a webhook
     * @returns any Success
     * @throws ApiError
     */
    webhookCreate({ serverId, requestBody, }: {
        serverId: string;
        requestBody: {
            /**
             * The name of the webhook
             */
            name: string;
            /**
             * Channel ID to create the webhook in
             */
            channelId: string;
        };
    }): CancelablePromise<{
        webhook: Webhook;
    }>;
    /**
     * Get a server's webhooks
     * Get a list of webhooks from a server.
     * @returns any Success
     * @throws ApiError
     */
    webhookReadMany({ serverId, channelId, }: {
        serverId: string;
        /**
         * ID of the channel you want to filter for webhooks
         */
        channelId: string;
    }): CancelablePromise<{
        webhooks: Array<Webhook>;
    }>;
    /**
     * Get a server's webhook
     * @returns any Success
     * @throws ApiError
     */
    webhookRead({ serverId, webhookId }: {
        serverId: string;
        webhookId: string;
    }): CancelablePromise<{
        webhook: Webhook;
    }>;
    /**
     * Update a webhook
     * @returns any Success
     * @throws ApiError
     */
    webhookUpdate({ serverId, webhookId, requestBody, }: {
        serverId: string;
        webhookId: string;
        requestBody: {
            /**
             * The name of the webhook
             */
            name: string;
            /**
             * The ID of the channel
             */
            channelId?: string;
        };
    }): CancelablePromise<{
        webhook: Webhook;
    }>;
    /**
     * Delete a server webhook
     * @returns void
     * @throws ApiError
     */
    webhookDelete({ serverId, webhookId }: {
        serverId: string;
        webhookId: string;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=WebhookService.d.ts.map