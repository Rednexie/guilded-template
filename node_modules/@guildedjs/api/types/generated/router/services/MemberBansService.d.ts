import type { ServerMemberBan } from "../models/ServerMemberBan";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class MemberBansService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a server ban
     * Also known as banning a server member
     * @returns any Success
     * @throws ApiError
     */
    serverMemberBanCreate({ serverId, userId, requestBody, }: {
        serverId: string;
        /**
         * The ID of the user to ban from this server
         */
        userId: string | "@me";
        requestBody?: {
            /**
             * The reason for the ban
             */
            reason?: string;
        };
    }): CancelablePromise<{
        serverMemberBan: ServerMemberBan;
    }>;
    /**
     * Get a server ban
     * @returns any Success
     * @throws ApiError
     */
    serverMemberBanRead({ serverId, userId, }: {
        serverId: string;
        /**
         * The ID of the user to get a server ban for
         */
        userId: string | "@me";
    }): CancelablePromise<{
        serverMemberBan: ServerMemberBan;
    }>;
    /**
     * Delete a server ban
     * Also known as unbanning a server member
     * @returns void
     * @throws ApiError
     */
    serverMemberBanDelete({ serverId, userId, }: {
        serverId: string;
        /**
         * The ID of the user to unban from this server
         */
        userId: string | "@me";
    }): CancelablePromise<void>;
    /**
     * Get server bans
     * @returns any Success
     * @throws ApiError
     */
    serverMemberBanReadMany({ serverId }: {
        serverId: string;
    }): CancelablePromise<{
        serverMemberBans: Array<ServerMemberBan>;
    }>;
}
//# sourceMappingURL=MemberBansService.d.ts.map