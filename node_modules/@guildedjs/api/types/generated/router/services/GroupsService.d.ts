import type { Group } from "../models/Group";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class GroupsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a group
     * Note: only 100 unarchived groups can exist on a server at any time
     * @returns any Success
     * @throws ApiError
     */
    groupCreate({ serverId, requestBody, }: {
        serverId: string;
        requestBody: {
            /**
             * The name of the group
             */
            name: string;
            /**
             * The description associated with the group
             */
            description?: string;
            /**
             * The emote to associate with the group
             */
            emoteId?: number;
            /**
             * Is this group open for anyone to join?
             */
            isPublic?: boolean;
        };
    }): CancelablePromise<{
        group: Group;
    }>;
    /**
     * Get groups
     * @returns any Success
     * @throws ApiError
     */
    groupReadMany({ serverId }: {
        serverId: string;
    }): CancelablePromise<{
        groups: Array<Group>;
    }>;
    /**
     * Get a group
     * @returns any Success
     * @throws ApiError
     */
    groupRead({ serverId, groupId }: {
        serverId: string;
        groupId: string;
    }): CancelablePromise<{
        group: Group;
    }>;
    /**
     * Update a group
     * @returns any Success
     * @throws ApiError
     */
    groupUpdate({ serverId, groupId, requestBody, }: {
        serverId: string;
        groupId: string;
        requestBody: {
            /**
             * The name of the group
             */
            name?: string;
            /**
             * The description associated with the group
             * **Note** - this property cannot be modified on a home group
             */
            description?: string;
            /**
             * The emote to associate with the group
             */
            emoteId?: number;
            /**
             * Is this group open for anyone to join?
             * **Note** - this property cannot be modified on a home group
             */
            isPublic?: boolean;
        };
    }): CancelablePromise<{
        group: Group;
    }>;
    /**
     * Delete a group
     * Note: you cannot delete the home group
     * @returns void
     * @throws ApiError
     */
    groupDelete({ serverId, groupId }: {
        serverId: string;
        groupId: string;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=GroupsService.d.ts.map