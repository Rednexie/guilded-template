import type { Category } from "../models/Category";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class CategoriesService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create a category
     * @returns any Success
     * @throws ApiError
     */
    categoryCreate({ serverId, requestBody, }: {
        serverId: string;
        requestBody: {
            /**
             * Name of the category
             */
            name: string;
            /**
             * The ID of the group. If not provided, the category will be created in the "Server home" group from `serverId`.
             */
            groupId?: string;
        };
    }): CancelablePromise<{
        category: Category;
    }>;
    /**
     * Read a category
     * @returns any Success
     * @throws ApiError
     */
    categoryRead({ serverId, categoryId }: {
        serverId: string;
        categoryId: number;
    }): CancelablePromise<{
        category: Category;
    }>;
    /**
     * Update a category
     * @returns any Success
     * @throws ApiError
     */
    categoryUpdate({ serverId, categoryId, requestBody, }: {
        serverId: string;
        categoryId: number;
        requestBody: {
            /**
             * Name of the category
             */
            name: string;
        };
    }): CancelablePromise<{
        category: Category;
    }>;
    /**
     * Delete a category
     * @returns any Success
     * @throws ApiError
     */
    categoryDelete({ serverId, categoryId }: {
        serverId: string;
        categoryId: number;
    }): CancelablePromise<{
        category: Category;
    }>;
}
//# sourceMappingURL=CategoriesService.d.ts.map