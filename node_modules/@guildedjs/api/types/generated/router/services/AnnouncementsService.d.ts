import type { Announcement } from "../models/Announcement";
import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class AnnouncementsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementCreate({ channelId, requestBody, }: {
        channelId: string;
        requestBody: {
            /**
             * The title of the announcement
             */
            title: string;
            /**
             * The content of the announcement
             */
            content: Record<string, any> | string;
        };
    }): CancelablePromise<{
        announcement: Announcement;
    }>;
    /**
     * Get announcements
     * Results returned will be ordered ascending by the announcement's `createdAt`. `before` will filter based on the announcement's `createdAt`
     * @returns any Success
     * @throws ApiError
     */
    announcementReadMany({ channelId, before, limit }: {
        channelId: string;
        before?: string;
        limit?: number;
    }): CancelablePromise<{
        announcements: Array<Announcement>;
    }>;
    /**
     * Read an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementRead({ channelId, announcementId }: {
        channelId: string;
        announcementId: string;
    }): CancelablePromise<{
        announcement: Announcement;
    }>;
    /**
     * Update an announcement
     * @returns any Success
     * @throws ApiError
     */
    announcementUpdate({ channelId, announcementId, requestBody, }: {
        channelId: string;
        announcementId: string;
        requestBody: {
            /**
             * The title of the announcement
             */
            title?: string;
            /**
             * The content of the announcement
             */
            content?: Record<string, any> | string;
        };
    }): CancelablePromise<{
        announcement: Announcement;
    }>;
    /**
     * Delete an announcement
     * @returns void
     * @throws ApiError
     */
    announcementDelete({ channelId, announcementId }: {
        channelId: string;
        announcementId: string;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=AnnouncementsService.d.ts.map