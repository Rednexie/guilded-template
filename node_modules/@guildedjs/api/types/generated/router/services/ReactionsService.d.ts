import type { CancelablePromise } from "../core/CancelablePromise";
import type { BaseHttpRequest } from "../core/BaseHttpRequest";
export declare class ReactionsService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Create forum topic reaction
     * @returns void
     * @throws ApiError
     */
    forumTopicReactionCreate({ channelId, forumTopicId, emoteId, }: {
        /**
         * Channel ID where the forum topic exists
         */
        channelId: string;
        /**
         * Forum Topic ID
         */
        forumTopicId: number;
        /**
         * Emote ID to apply
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete forum topic reaction
     * @returns void
     * @throws ApiError
     */
    forumTopicReactionDelete({ channelId, forumTopicId, emoteId, }: {
        /**
         * Channel ID where the forum topic exists
         */
        channelId: string;
        /**
         * Forum Topic ID
         */
        forumTopicId: number;
        /**
         * Emote ID to remove
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create forum topic comment reaction
     * @returns void
     * @throws ApiError
     */
    forumTopicCommentReactionCreate({ channelId, forumTopicId, forumTopicCommentId, emoteId, }: {
        /**
         * Channel ID where the forum topic exists
         */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete forum topic comment reaction
     * @returns void
     * @throws ApiError
     */
    forumTopicCommentReactionDelete({ channelId, forumTopicId, forumTopicCommentId, emoteId, }: {
        /**
         * Channel ID where the forum topic exists
         */
        channelId: string;
        forumTopicId: number;
        forumTopicCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create calendar event reaction
     * @returns void
     * @throws ApiError
     */
    calendarEventReactionCreate({ channelId, calendarEventId, emoteId }: {
        channelId: string;
        calendarEventId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete calendar event reaction
     * @returns void
     * @throws ApiError
     */
    calendarEventReactionDelete({ channelId, calendarEventId, emoteId }: {
        channelId: string;
        calendarEventId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create calendar event comment reaction
     * @returns void
     * @throws ApiError
     */
    calendarEventCommentReactionCreate({ channelId, calendarEventId, calendarEventCommentId, emoteId, }: {
        channelId: string;
        calendarEventId: number;
        calendarEventCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete calendar event comment reaction
     * @returns void
     * @throws ApiError
     */
    calendarEventCommentReactionDelete({ channelId, calendarEventId, calendarEventCommentId, emoteId, }: {
        channelId: string;
        calendarEventId: number;
        calendarEventCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create doc reaction
     * @returns void
     * @throws ApiError
     */
    docReactionCreate({ channelId, docId, emoteId }: {
        channelId: string;
        docId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete doc reaction
     * @returns void
     * @throws ApiError
     */
    docReactionDelete({ channelId, docId, emoteId }: {
        channelId: string;
        docId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create doc comment reaction
     * @returns void
     * @throws ApiError
     */
    docCommentReactionCreate({ channelId, docId, docCommentId, emoteId }: {
        channelId: string;
        docId: number;
        docCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete doc comment reaction
     * @returns void
     * @throws ApiError
     */
    docCommentReactionDelete({ channelId, docId, docCommentId, emoteId }: {
        channelId: string;
        docId: number;
        docCommentId: number;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create announcement reaction
     * @returns void
     * @throws ApiError
     */
    announcementReactionCreate({ channelId, announcementId, emoteId, }: {
        channelId: string;
        announcementId: string;
        /**
         * Emote ID to apply
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete announcement reaction
     * @returns void
     * @throws ApiError
     */
    announcementReactionDelete({ channelId, announcementId, emoteId, }: {
        channelId: string;
        announcementId: string;
        /**
         * Emote ID to apply
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create an announcement comment reaction
     * @returns void
     * @throws ApiError
     */
    announcementCommentReactionCreate({ channelId, announcementId, announcementCommentId, emoteId, }: {
        /**
         * Channel ID where the announcement comment exists
         */
        channelId: string;
        announcementId: string;
        announcementCommentId: number;
        /**
         * Emote ID to apply
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete an announcement comment reaction
     * @returns void
     * @throws ApiError
     */
    announcementCommentReactionDelete({ channelId, announcementId, announcementCommentId, emoteId, }: {
        /**
         * Channel ID where the announcement comment exists
         */
        channelId: string;
        announcementId: string;
        announcementCommentId: number;
        /**
         * Emote ID to apply
         */
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Create a message reaction
     * @returns void
     * @throws ApiError
     */
    channelMessageReactionCreate({ channelId, messageId, emoteId }: {
        channelId: string;
        messageId: string;
        emoteId: number;
    }): CancelablePromise<void>;
    /**
     * Delete a message reaction
     * @returns void
     * @throws ApiError
     */
    channelMessageReactionDelete({ channelId, messageId, emoteId, userId }: {
        channelId: string;
        messageId: string;
        emoteId: number;
        userId?: string | "@me";
    }): CancelablePromise<void>;
    /**
     * Bulk delete a message's reactions
     * @returns void
     * @throws ApiError
     */
    channelMessageReactionDeleteMany({ channelId, messageId, emoteId }: {
        channelId: string;
        messageId: string;
        emoteId?: number;
    }): CancelablePromise<void>;
}
//# sourceMappingURL=ReactionsService.d.ts.map